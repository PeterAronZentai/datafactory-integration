{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "serve-legal-DW-historic-audits-import"
		},
		"AWS AVS prod replica set_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AWS AVS prod replica set'"
		},
		"AWS AVS replica set_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AWS AVS replica set'"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureDataLakeAnalytics1_servicePrincipalKey": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalKey' of 'AzureDataLakeAnalytics1'"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureDataLakeStore1Auth_servicePrincipalKey": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalKey' of 'AzureDataLakeStore1Auth'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"SQLDataWarehouseDev_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SQLDataWarehouseDev'"
		},
		"SQLDataWarehouseDevAuth_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SQLDataWarehouseDevAuth'"
		},
		"SQLDataWarehousePRODAuth_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SQLDataWarehousePRODAuth'"
		},
		"AzureDataLakeAnalytics1_properties_typeProperties_accountName": {
			"type": "string",
			"defaultValue": "servelegalimportdev"
		},
		"AzureDataLakeAnalytics1_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "6260e07a-d213-40dd-9450-b0d5adb91a68"
		},
		"AzureDataLakeAnalytics1_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "34237eca-663f-4556-96e6-d51b1d7cf362"
		},
		"AzureDataLakeAnalytics1_properties_typeProperties_subscriptionId": {
			"type": "string",
			"defaultValue": "74c2fcf2-0a41-42ea-9cc4-3bc02ac81f24"
		},
		"AzureDataLakeAnalytics1_properties_typeProperties_resourceGroupName": {
			"type": "string",
			"defaultValue": "serve-legal-powerbi-dev"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://servelegalstoragegen2dev.dfs.core.windows.net"
		},
		"AzureDataLakeStore1_properties_typeProperties_dataLakeStoreUri": {
			"type": "string",
			"defaultValue": "https://servelegalimportlake1dev.azuredatalakestore.net/webhdfs/v1"
		},
		"AzureDataLakeStore1_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "34237eca-663f-4556-96e6-d51b1d7cf362"
		},
		"AzureDataLakeStore1_properties_typeProperties_subscriptionId": {
			"type": "string",
			"defaultValue": "74c2fcf2-0a41-42ea-9cc4-3bc02ac81f24"
		},
		"AzureDataLakeStore1_properties_typeProperties_resourceGroupName": {
			"type": "string",
			"defaultValue": "serve-legal-powerbi-dev"
		},
		"AzureDataLakeStore1Auth_properties_typeProperties_dataLakeStoreUri": {
			"type": "string",
			"defaultValue": "https://servelegalimportlake1dev.azuredatalakestore.net/webhdfs/v1"
		},
		"AzureDataLakeStore1Auth_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "6260e07a-d213-40dd-9450-b0d5adb91a68"
		},
		"AzureDataLakeStore1Auth_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "34237eca-663f-4556-96e6-d51b1d7cf362"
		},
		"AzureDataLakeStore1Auth_properties_typeProperties_subscriptionId": {
			"type": "string",
			"defaultValue": "74c2fcf2-0a41-42ea-9cc4-3bc02ac81f24"
		},
		"AzureDataLakeStore1Auth_properties_typeProperties_resourceGroupName": {
			"type": "string",
			"defaultValue": "serve-legal-powerbi-dev"
		},
		"serve_legal_reports_key_vault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://serve-legal-reports.vault.azure.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AVS to Staging')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DW Answers get date",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Truncate Staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_sync_get_update_date]",
								"storedProcedureParameters": {
									"tableName": {
										"type": "String",
										"value": "Answers"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DW",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy Answers",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "DW Answers get date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource",
								"query": {
									"value": "select\n *,\n 'AVS' as entity_source\nfrom audits.audit_answers\nwhere created_at > '@{activity('DW Answers get date').output.firstRow.max}'\nor modified_at > '@{activity('DW Answers get date').output.firstRow.max}'\nlimit 0",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "String"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "internal_id",
											"type": "String"
										},
										"sink": {
											"name": "internal_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "type",
											"type": "String"
										},
										"sink": {
											"name": "type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "value",
											"type": "String"
										},
										"sink": {
											"name": "value",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "hidden",
											"type": "Boolean"
										},
										"sink": {
											"name": "hidden",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "audit_id",
											"type": "Guid"
										},
										"sink": {
											"name": "audit_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "question_template_id",
											"type": "Guid"
										},
										"sink": {
											"name": "question_template_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "String"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "modified_at",
											"type": "String"
										},
										"sink": {
											"name": "modified_at",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "entity_source",
											"type": "String"
										},
										"sink": {
											"name": "entity_source",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AVS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "staging_Answers",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "DW Answer set date",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Decision to continue",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_sync_set_update_date]",
							"storedProcedureParameters": {
								"tableName": {
									"value": "Answers",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLDataWarehousePRODAuth",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "DW Auditors get date",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Truncate Staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_sync_get_update_date]",
								"storedProcedureParameters": {
									"tableName": {
										"type": "String",
										"value": "Auditors"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DW",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy Auditors",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "DW Auditors get date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource",
								"query": {
									"value": "select\n *,\n 'AVS' as entity_source\nfrom users.auditor",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Guid"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "internal_id",
											"type": "String"
										},
										"sink": {
											"name": "internal_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "email_settings",
											"type": "Boolean"
										},
										"sink": {
											"name": "email_settings",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "passport",
											"type": "String"
										},
										"sink": {
											"name": "passport",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "identification",
											"type": "String"
										},
										"sink": {
											"name": "identification",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "country",
											"type": "String"
										},
										"sink": {
											"name": "country",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "honorific",
											"type": "String"
										},
										"sink": {
											"name": "honorific",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "gender",
											"type": "String"
										},
										"sink": {
											"name": "gender",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "date_of_birth",
											"type": "String"
										},
										"sink": {
											"name": "date_of_birth",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "marital_status",
											"type": "String"
										},
										"sink": {
											"name": "marital_status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "occupation",
											"type": "String"
										},
										"sink": {
											"name": "occupation",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ni_pps",
											"type": "String"
										},
										"sink": {
											"name": "ni_pps",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "home_address_1",
											"type": "String"
										},
										"sink": {
											"name": "home_address_1",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "home_address_2",
											"type": "String"
										},
										"sink": {
											"name": "home_address_2",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "home_city",
											"type": "String"
										},
										"sink": {
											"name": "home_city",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "home_post_code",
											"type": "String"
										},
										"sink": {
											"name": "home_post_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "home_county",
											"type": "String"
										},
										"sink": {
											"name": "home_county",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "term_address_1",
											"type": "String"
										},
										"sink": {
											"name": "term_address_1",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "term_address_2",
											"type": "String"
										},
										"sink": {
											"name": "term_address_2",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "term_city",
											"type": "String"
										},
										"sink": {
											"name": "term_city",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "term_post_code",
											"type": "String"
										},
										"sink": {
											"name": "term_post_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "term_county",
											"type": "String"
										},
										"sink": {
											"name": "term_county",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "mobile_number",
											"type": "String"
										},
										"sink": {
											"name": "mobile_number",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "home_number",
											"type": "String"
										},
										"sink": {
											"name": "home_number",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "notes",
											"type": "String"
										},
										"sink": {
											"name": "notes",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "hear_about_us",
											"type": "String"
										},
										"sink": {
											"name": "hear_about_us",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "hear_about_us_details",
											"type": "String"
										},
										"sink": {
											"name": "hear_about_us_details",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "recommended_by",
											"type": "String"
										},
										"sink": {
											"name": "recommended_by",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "email_communication",
											"type": "Boolean"
										},
										"sink": {
											"name": "email_communication",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "servelegal_community",
											"type": "Boolean"
										},
										"sink": {
											"name": "servelegal_community",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "card_name",
											"type": "String"
										},
										"sink": {
											"name": "card_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "bank_country",
											"type": "String"
										},
										"sink": {
											"name": "bank_country",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "account_number",
											"type": "String"
										},
										"sink": {
											"name": "account_number",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "sort_code",
											"type": "String"
										},
										"sink": {
											"name": "sort_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "swift_code",
											"type": "String"
										},
										"sink": {
											"name": "swift_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "iban_number",
											"type": "String"
										},
										"sink": {
											"name": "iban_number",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "circumstances",
											"type": "String"
										},
										"sink": {
											"name": "circumstances",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "student_loans",
											"type": "String"
										},
										"sink": {
											"name": "student_loans",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "access_to_car",
											"type": "String"
										},
										"sink": {
											"name": "access_to_car",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "why_servelegal",
											"type": "String"
										},
										"sink": {
											"name": "why_servelegal",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "about_yourself",
											"type": "String"
										},
										"sink": {
											"name": "about_yourself",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "travel_outside",
											"type": "String"
										},
										"sink": {
											"name": "travel_outside",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "auditor_status",
											"type": "String"
										},
										"sink": {
											"name": "auditor_status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "user_id",
											"type": "Guid"
										},
										"sink": {
											"name": "user_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "entity_source",
											"type": "String"
										},
										"sink": {
											"name": "entity_source",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AVS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "staging_Auditors",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "DW Audits get date",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Truncate Staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_sync_get_update_date]",
								"storedProcedureParameters": {
									"tableName": {
										"type": "String",
										"value": "Audits"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DW",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy Audits",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "DW Audits get date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource",
								"query": {
									"value": "select\n *,\n jsonb_extract_path_text(survey_result::jsonb, '0', 'result') as survey_result_value,\n 'AVS' as entity_source,\n null as allowance,\n null as briefing_documents\nfrom audits.audit\nwhere created_at > '@{activity('DW Audits get date').output.firstRow.max}'\nor modified_at > '@{activity('DW Audits get date').output.firstRow.max}'",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Guid"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "internal_id",
											"type": "String"
										},
										"sink": {
											"name": "internal_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "query_notes",
											"type": "String"
										},
										"sink": {
											"name": "query_notes",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "query_category",
											"type": "String"
										},
										"sink": {
											"name": "query_category",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "survey_result_value",
											"type": "String"
										},
										"sink": {
											"name": "survey_result",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "visit_info",
											"type": "String"
										},
										"sink": {
											"name": "visit_info",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "submitted_date",
											"type": "String"
										},
										"sink": {
											"name": "submitted_date",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "approval_date",
											"type": "String"
										},
										"sink": {
											"name": "approval_date",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "deadline_date",
											"type": "String"
										},
										"sink": {
											"name": "deadline_date",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "date_of_visit",
											"type": "String"
										},
										"sink": {
											"name": "date_of_visit",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "purchase_cost",
											"type": "Single"
										},
										"sink": {
											"name": "purchase_cost",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "allowance",
											"type": "Single"
										},
										"sink": {
											"name": "allowance",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "mileage",
											"type": "Single"
										},
										"sink": {
											"name": "mileage",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "entrance_charge",
											"type": "Single"
										},
										"sink": {
											"name": "entrance_charge",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "travel_expenses",
											"type": "Single"
										},
										"sink": {
											"name": "travel_expenses",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "travel_expenses_type",
											"type": "String"
										},
										"sink": {
											"name": "travel_expenses_type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "travel_expenses_description",
											"type": "String"
										},
										"sink": {
											"name": "travel_expenses_description",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "reclaimable_expenses",
											"type": "Single"
										},
										"sink": {
											"name": "reclaimable_expenses",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "reclaimable_expenses_type",
											"type": "String"
										},
										"sink": {
											"name": "reclaimable_expenses_type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "reclaimable_expenses_description",
											"type": "String"
										},
										"sink": {
											"name": "reclaimable_expenses_description",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "paid",
											"type": "Boolean"
										},
										"sink": {
											"name": "paid",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "batched",
											"type": "Boolean"
										},
										"sink": {
											"name": "batched",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "payroll_date",
											"type": "String"
										},
										"sink": {
											"name": "payroll_date",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "pay_date",
											"type": "String"
										},
										"sink": {
											"name": "pay_date",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "email_note",
											"type": "String"
										},
										"sink": {
											"name": "email_note",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "status",
											"type": "String"
										},
										"sink": {
											"name": "status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "order_id",
											"type": "Guid"
										},
										"sink": {
											"name": "order_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "site_id",
											"type": "Guid"
										},
										"sink": {
											"name": "site_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "approved_by_id",
											"type": "Guid"
										},
										"sink": {
											"name": "approved_by_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "auditor_id",
											"type": "Guid"
										},
										"sink": {
											"name": "auditor_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "item_to_order",
											"type": "String"
										},
										"sink": {
											"name": "item_to_order",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "auditor_instructions",
											"type": "String"
										},
										"sink": {
											"name": "auditor_instructions",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "auditor_pay_per_audit",
											"type": "Single"
										},
										"sink": {
											"name": "auditor_pay_per_audit",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "approving_notes",
											"type": "String"
										},
										"sink": {
											"name": "approving_notes",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "String"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "modified_at",
											"type": "String"
										},
										"sink": {
											"name": "modified_at",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "entity_source",
											"type": "String"
										},
										"sink": {
											"name": "entity_source",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AVS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "staging_Audits",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "DW Audits set date",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Decision to continue",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_sync_set_update_date]",
							"storedProcedureParameters": {
								"tableName": {
									"value": "Audits",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLDataWarehousePRODAuth",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "DW Clients get date",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Truncate Staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_sync_get_update_date]",
								"storedProcedureParameters": {
									"tableName": {
										"type": "String",
										"value": "Clients"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DW",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy Clients",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "DW Clients get date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource",
								"query": {
									"value": "select\n *,\n 'AVS' as entity_source\nfrom clients.client\nwhere created_at > '@{activity('DW Clients get date').output.firstRow.max}'\nor modified_at > '@{activity('DW Clients get date').output.firstRow.max}'",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Guid"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "internal_id",
											"type": "String"
										},
										"sink": {
											"name": "internal_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "legacy_id",
											"type": "String"
										},
										"sink": {
											"name": "legacy_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "logo",
											"type": "String"
										},
										"sink": {
											"name": "logo",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "footer",
											"type": "String"
										},
										"sink": {
											"name": "footer",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "client_type",
											"type": "String"
										},
										"sink": {
											"name": "client_type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "sage_reference",
											"type": "String"
										},
										"sink": {
											"name": "sage_reference",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "manager_id",
											"type": "Guid"
										},
										"sink": {
											"name": "manager_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "contract_expiry",
											"type": "String"
										},
										"sink": {
											"name": "contract_expiry",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "store_locator",
											"type": "String"
										},
										"sink": {
											"name": "store_locator",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "status",
											"type": "String"
										},
										"sink": {
											"name": "status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "String"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "modified_at",
											"type": "String"
										},
										"sink": {
											"name": "modified_at",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "entity_source",
											"type": "String"
										},
										"sink": {
											"name": "entity_source",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AVS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "staging_Clients",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "DW Clients set date",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Decision to continue",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_sync_set_update_date]",
							"storedProcedureParameters": {
								"tableName": {
									"value": "Clients",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLDataWarehousePRODAuth",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "DW Orders get date",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Truncate Staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_sync_get_update_date]",
								"storedProcedureParameters": {
									"tableName": {
										"type": "String",
										"value": "Orders"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DW",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy Orders",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "DW Orders get date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource",
								"query": {
									"value": "select\n *,\n 'AVS' as entity_source\nfrom orders.order\nwhere created_at > '@{activity('DW Orders get date').output.firstRow.max}'\nor modified_at > '@{activity('DW Orders get date').output.firstRow.max}'",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Guid"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "internal_id",
											"type": "String"
										},
										"sink": {
											"name": "internal_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "schedule_type",
											"type": "String"
										},
										"sink": {
											"name": "schedule_type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "item_to_order",
											"type": "String"
										},
										"sink": {
											"name": "item_to_order",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "order_info",
											"type": "String"
										},
										"sink": {
											"name": "order_info",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "visits_to_be_billed",
											"type": "Int32"
										},
										"sink": {
											"name": "visits_to_be_billed",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "start_date",
											"type": "String"
										},
										"sink": {
											"name": "start_date",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "end_date",
											"type": "String"
										},
										"sink": {
											"name": "end_date",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "auditor_pay_per_audit",
											"type": "Single"
										},
										"sink": {
											"name": "auditor_pay_per_audit",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "client_charge_per_audit",
											"type": "Single"
										},
										"sink": {
											"name": "client_charge_per_audit",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "auditor_instructions",
											"type": "String"
										},
										"sink": {
											"name": "auditor_instructions",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "email_subject",
											"type": "String"
										},
										"sink": {
											"name": "email_subject",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "email_survey_result",
											"type": "String"
										},
										"sink": {
											"name": "email_survey_result",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "exclude_from_client_reporting",
											"type": "Boolean"
										},
										"sink": {
											"name": "exclude_from_client_reporting",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "narv_visits_only",
											"type": "Boolean"
										},
										"sink": {
											"name": "narv_visits_only",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "status",
											"type": "String"
										},
										"sink": {
											"name": "status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "currency",
											"type": "String"
										},
										"sink": {
											"name": "currency",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "client_id",
											"type": "Guid"
										},
										"sink": {
											"name": "client_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "revision_id",
											"type": "Guid"
										},
										"sink": {
											"name": "revision_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "String"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "modified_at",
											"type": "String"
										},
										"sink": {
											"name": "modified_at",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "entity_source",
											"type": "String"
										},
										"sink": {
											"name": "entity_source",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AVS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "staging_Orders",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "DW Orders set date",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Decision to continue",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_sync_set_update_date]",
							"storedProcedureParameters": {
								"tableName": {
									"value": "Orders",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLDataWarehousePRODAuth",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "DW Questions get date",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Truncate Staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_sync_get_update_date]",
								"storedProcedureParameters": {
									"tableName": {
										"type": "String",
										"value": "Questions"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DW",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy Questions",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "DW Questions get date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource",
								"query": {
									"value": "select\n *,\n 'AVS' as entity_source\nfrom surveys.revision_questions\nwhere created_at > '@{activity('DW Questions get date').output.firstRow.max}'\nor modified_at > '@{activity('DW Questions get date').output.firstRow.max}'\nlimit 0",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "String"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "internal_id",
											"type": "String"
										},
										"sink": {
											"name": "internal_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "help",
											"type": "String"
										},
										"sink": {
											"name": "help",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "type",
											"type": "String"
										},
										"sink": {
											"name": "type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "title",
											"type": "String"
										},
										"sink": {
											"name": "title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "required",
											"type": "Boolean"
										},
										"sink": {
											"name": "required",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "category",
											"type": "String"
										},
										"sink": {
											"name": "category",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "config",
											"type": "String"
										},
										"sink": {
											"name": "config",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "question_template_id",
											"type": "Guid"
										},
										"sink": {
											"name": "question_template_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "revision_id",
											"type": "Guid"
										},
										"sink": {
											"name": "revision_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "String"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "modified_at",
											"type": "String"
										},
										"sink": {
											"name": "modified_at",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "entity_source",
											"type": "String"
										},
										"sink": {
											"name": "entity_source",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AVS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "staging_Questions",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "DW Questions set date",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Decision to continue",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_sync_set_update_date]",
							"storedProcedureParameters": {
								"tableName": {
									"value": "Questions",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLDataWarehousePRODAuth",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "DW QuestionTemplates get date",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Truncate Staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_sync_get_update_date]",
								"storedProcedureParameters": {
									"tableName": {
										"type": "String",
										"value": "QuestionTemplates"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DW",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy QuestionTemplates",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "DW QuestionTemplates get date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource",
								"query": {
									"value": "select\n *,\n 'AVS' as entity_source\nfrom questions.question\nwhere created_at > '@{activity('DW QuestionTemplates get date').output.firstRow.max}'\nor modified_at > '@{activity('DW QuestionTemplates get date').output.firstRow.max}'\n",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Guid"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "internal_id",
											"type": "String"
										},
										"sink": {
											"name": "internal_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "help",
											"type": "String"
										},
										"sink": {
											"name": "help",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "title",
											"type": "String"
										},
										"sink": {
											"name": "title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "required",
											"type": "Boolean"
										},
										"sink": {
											"name": "required",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "type",
											"type": "String"
										},
										"sink": {
											"name": "type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "config",
											"type": "String"
										},
										"sink": {
											"name": "config",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "category",
											"type": "String"
										},
										"sink": {
											"name": "category",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "String"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "modified_at",
											"type": "String"
										},
										"sink": {
											"name": "modified_at",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "entity_source",
											"type": "String"
										},
										"sink": {
											"name": "entity_source",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AVS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "staging_QuestionTemplates",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "DW QuestionTemplates set date",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Decision to continue",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_sync_set_update_date]",
							"storedProcedureParameters": {
								"tableName": {
									"value": "QuestionTemplates",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLDataWarehousePRODAuth",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "DW Revisions get date",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Truncate Staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_sync_get_update_date]",
								"storedProcedureParameters": {
									"tableName": {
										"type": "String",
										"value": "Revisions"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DW",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy Revisions",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "DW Revisions get date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource",
								"query": {
									"value": "select\n *,\n 'AVS' as entity_source\nfrom surveys.revision\nwhere created_at > '@{activity('DW Revisions get date').output.firstRow.max}'\nor modified_at > '@{activity('DW Revisions get date').output.firstRow.max}'",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Guid"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "internal_id",
											"type": "String"
										},
										"sink": {
											"name": "internal_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "status",
											"type": "String"
										},
										"sink": {
											"name": "status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "survey_id",
											"type": "Guid"
										},
										"sink": {
											"name": "survey_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "blocked",
											"type": "Boolean"
										},
										"sink": {
											"name": "blocked",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "String"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "modified_at",
											"type": "String"
										},
										"sink": {
											"name": "modified_at",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "entity_source",
											"type": "String"
										},
										"sink": {
											"name": "entity_source",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AVS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "staging_Revisions",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "DW Revisions set date",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Decision to continue",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_sync_set_update_date]",
							"storedProcedureParameters": {
								"tableName": {
									"value": "Revisions",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLDataWarehousePRODAuth",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "DW Sites get date",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Truncate Staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_sync_get_update_date]",
								"storedProcedureParameters": {
									"tableName": {
										"type": "String",
										"value": "Sites"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DW",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy Sites",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "DW Sites get date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource",
								"query": {
									"value": "select\n *,\n coalesce(\n\t jsonb_extract_path_text(organisation_level_code::jsonb, '0', 'org_level_1'),\n\t jsonb_extract_path_text(organisation_level_code::jsonb, '1', 'org_level_1'),\n\t jsonb_extract_path_text(organisation_level_code::jsonb, '2', 'org_level_1'),\n\t jsonb_extract_path_text(organisation_level_code::jsonb, '3', 'org_level_1')\n ) as org_level1,\n  coalesce(\n\t jsonb_extract_path_text(organisation_level_code::jsonb, '0', 'org_level_2'),\n\t jsonb_extract_path_text(organisation_level_code::jsonb, '1', 'org_level_2'),\n\t jsonb_extract_path_text(organisation_level_code::jsonb, '2', 'org_level_2'),\n\t jsonb_extract_path_text(organisation_level_code::jsonb, '3', 'org_level_2')\n ) as org_level2,\n  coalesce(\n\t jsonb_extract_path_text(organisation_level_code::jsonb, '0', 'org_level_3'),\n\t jsonb_extract_path_text(organisation_level_code::jsonb, '1', 'org_level_3'),\n\t jsonb_extract_path_text(organisation_level_code::jsonb, '2', 'org_level_3'),\n\t jsonb_extract_path_text(organisation_level_code::jsonb, '3', 'org_level_3')\n ) as org_level3,\n  coalesce(\n\t jsonb_extract_path_text(organisation_level_code::jsonb, '0', 'org_level_4'),\n\t jsonb_extract_path_text(organisation_level_code::jsonb, '1', 'org_level_4'),\n\t jsonb_extract_path_text(organisation_level_code::jsonb, '2', 'org_level_4'),\n\t jsonb_extract_path_text(organisation_level_code::jsonb, '3', 'org_level_4')\n ) as org_level4,\n 'AVS' as entity_source\nfrom sites.site\nwhere created_at > '@{activity('DW Sites get date').output.firstRow.max}'\nor modified_at > '@{activity('DW Sites get date').output.firstRow.max}'",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Guid"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "internal_id",
											"type": "String"
										},
										"sink": {
											"name": "internal_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "legacy_id",
											"type": "String"
										},
										"sink": {
											"name": "legacy_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "address_1",
											"type": "String"
										},
										"sink": {
											"name": "address_1",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "address_2",
											"type": "String"
										},
										"sink": {
											"name": "address_2",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "address_3",
											"type": "String"
										},
										"sink": {
											"name": "address_3",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "city",
											"type": "String"
										},
										"sink": {
											"name": "city",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "post_code",
											"type": "String"
										},
										"sink": {
											"name": "post_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "county",
											"type": "String"
										},
										"sink": {
											"name": "county",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "country",
											"type": "String"
										},
										"sink": {
											"name": "country",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "directions",
											"type": "String"
										},
										"sink": {
											"name": "directions",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "approving_notes",
											"type": "String"
										},
										"sink": {
											"name": "approving_notes",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "code",
											"type": "String"
										},
										"sink": {
											"name": "code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "status",
											"type": "String"
										},
										"sink": {
											"name": "status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "client_id",
											"type": "Guid"
										},
										"sink": {
											"name": "client_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "String"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "modified_at",
											"type": "String"
										},
										"sink": {
											"name": "modified_at",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "org_level1",
											"type": "String"
										},
										"sink": {
											"name": "org_level1",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "org_level2",
											"type": "String"
										},
										"sink": {
											"name": "org_level2",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "org_level3",
											"type": "String"
										},
										"sink": {
											"name": "org_level3",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "org_level4",
											"type": "String"
										},
										"sink": {
											"name": "org_level4",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "entity_source",
											"type": "String"
										},
										"sink": {
											"name": "entity_source",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AVS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "staging_Sites",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "DW Sites set date",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Decision to continue",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_sync_set_update_date]",
							"storedProcedureParameters": {
								"tableName": {
									"value": "Sites",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLDataWarehousePRODAuth",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "DW Surveys get date",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Truncate Staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_sync_get_update_date]",
								"storedProcedureParameters": {
									"tableName": {
										"type": "String",
										"value": "Surveys"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DW",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy Surveys",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "DW Surveys get date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource",
								"query": {
									"value": "select\n *,\n 'AVS' as entity_source\nfrom surveys.survey\nwhere created_at > '@{activity('DW Surveys get date').output.firstRow.max}'\nor modified_at > '@{activity('DW Surveys get date').output.firstRow.max}'",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Guid"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "internal_id",
											"type": "String"
										},
										"sink": {
											"name": "internal_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "title",
											"type": "String"
										},
										"sink": {
											"name": "title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "String"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "modified_at",
											"type": "String"
										},
										"sink": {
											"name": "modified_at",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "entity_source",
											"type": "String"
										},
										"sink": {
											"name": "entity_source",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AVS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "staging_Surveys",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "DW Surveys set date",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Decision to continue",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_sync_set_update_date]",
							"storedProcedureParameters": {
								"tableName": {
									"value": "Surveys",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLDataWarehousePRODAuth",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "DW Users get date",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Truncate Staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_sync_get_update_date]",
								"storedProcedureParameters": {
									"tableName": {
										"type": "String",
										"value": "Users"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DW",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy Users",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "DW Users get date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource",
								"query": {
									"value": "select\n *,\n 'AVS' as entity_source\nfrom users.user\nwhere created_at > '@{activity('DW Users get date').output.firstRow.max}'\nor modified_at > '@{activity('DW Users get date').output.firstRow.max}'",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Guid"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "internal_id",
											"type": "String"
										},
										"sink": {
											"name": "internal_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "first_name",
											"type": "String"
										},
										"sink": {
											"name": "first_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "middle_name",
											"type": "String"
										},
										"sink": {
											"name": "middle_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "last_name",
											"type": "String"
										},
										"sink": {
											"name": "last_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "email",
											"type": "String"
										},
										"sink": {
											"name": "email",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "image",
											"type": "String"
										},
										"sink": {
											"name": "image",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "status",
											"type": "String"
										},
										"sink": {
											"name": "status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "notify_user",
											"type": "Boolean"
										},
										"sink": {
											"name": "notify_user",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "role",
											"type": "String"
										},
										"sink": {
											"name": "role",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "last_access",
											"type": "String"
										},
										"sink": {
											"name": "last_access",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "client_id",
											"type": "Guid"
										},
										"sink": {
											"name": "client_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "String"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "modified_at",
											"type": "String"
										},
										"sink": {
											"name": "modified_at",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "entity_source",
											"type": "String"
										},
										"sink": {
											"name": "entity_source",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AVS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "staging_Users",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "DW Users set date",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Decision to continue",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_sync_set_update_date]",
							"storedProcedureParameters": {
								"tableName": {
									"value": "Users",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLDataWarehousePRODAuth",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate Staging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_truncate_staging_tables]"
						},
						"linkedServiceName": {
							"referenceName": "SQLDataWarehousePRODAuth",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Decision to continue",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy Answers",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy Audits",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy Clients",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy Orders",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy Questions",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy Revisions",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy Sites",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy Surveys",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy Users",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy Auditors",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "StagingToDWDecision",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2020-09-24T14:31:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DW')]",
				"[concat(variables('factoryId'), '/datasets/AVS')]",
				"[concat(variables('factoryId'), '/datasets/staging_Answers')]",
				"[concat(variables('factoryId'), '/linkedServices/SQLDataWarehousePRODAuth')]",
				"[concat(variables('factoryId'), '/datasets/staging_Auditors')]",
				"[concat(variables('factoryId'), '/datasets/staging_Audits')]",
				"[concat(variables('factoryId'), '/datasets/staging_Clients')]",
				"[concat(variables('factoryId'), '/datasets/staging_Orders')]",
				"[concat(variables('factoryId'), '/datasets/staging_Questions')]",
				"[concat(variables('factoryId'), '/datasets/staging_QuestionTemplates')]",
				"[concat(variables('factoryId'), '/datasets/staging_Revisions')]",
				"[concat(variables('factoryId'), '/datasets/staging_Sites')]",
				"[concat(variables('factoryId'), '/datasets/staging_Surveys')]",
				"[concat(variables('factoryId'), '/datasets/staging_Users')]",
				"[concat(variables('factoryId'), '/pipelines/StagingToDWDecision')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CalculateAverages')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CalculateAverages",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CalculateAverages",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Audits": {},
									"Clients": {},
									"Sites": {},
									"DimYesNo": {},
									"TDailyByClientType": {
										"TableName": "Avg_Daily_ClientType"
									},
									"TClientTypes": {
										"TableName": "ClientTypes"
									},
									"TProducts": {
										"TableName": "Products"
									},
									"TDailyByProdyct": {
										"TableName": "Avg_Daily_Product"
									},
									"TAverageByProduct": {
										"TableName": "Avg_Product"
									},
									"TDailyByClientTypeProduct": {
										"TableName": "Avg_Daily_ClientType_Product"
									},
									"TMonthlyByClientTypeProduct": {
										"TableName": "Avg_Monthly_ClientType_Product"
									},
									"TWeeklyByClientTypeProduct": {
										"TableName": "Avg_Weekly_ClientType_Product"
									},
									"TWeeklyByClient": {
										"TableName": "Avg_Weekly_ClientType"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "ttl10-pipeline",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/CalculateAverages')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/ttl10-pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CalculateAverages_Test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CalculateAverages",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CalculateAverages",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Audits": {},
									"Clients": {},
									"Sites": {},
									"DimYesNo": {},
									"TDailyByClientType": {
										"TableName": "Avg_Daily_ClientType_Product_TEST"
									},
									"TClientTypes": {
										"TableName": "ClientTypes_TEST"
									},
									"TProducts": {
										"TableName": "Products_TEST"
									},
									"TDailyByProdyct": {
										"TableName": "Avg_Daily_Product_TEST"
									},
									"TAverageByProduct": {
										"TableName": "Avg_Product_TEST"
									},
									"TDailyByClientTypeProduct": {
										"TableName": "Avg_Daily_ClientType_Product_TEST"
									},
									"TMonthlyByClientTypeProduct": {
										"TableName": "Avg_Monthly_ClientType_Product_TEST"
									},
									"TWeeklyByClientTypeProduct": {
										"TableName": "Avg_Weekly_ClientType_Product_TEST"
									},
									"TWeeklyByClient": {
										"TableName": "Avg_Weekly_ClientType_TEST"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/CalculateAverages')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ComplexSyncClients')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SyncAVSClients",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SyncAVSClients",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagingClient": {},
									"ExistingClients": {},
									"sink1": {
										"table_name": "t_error"
									},
									"UpsertClient": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "CustomIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SyncAVSClients')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/CustomIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ConvertExcelToTables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ConvertExcelToTables",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ConvertExcelToTables",
								"type": "DataFlowReference",
								"parameters": {
									"client_to_export": "'CLIENT5'"
								},
								"datasetParameters": {
									"Excel": {},
									"sink1": {
										"table_name": "imported_visits"
									},
									"sink2": {
										"TableName": "test_visits"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "CustomIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ConvertExcelToTables')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/CustomIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExportHistoricalToTable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Order",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Order",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Client",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Client",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Visit",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Visit",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Site",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Site",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Premises Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Premises Name",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Address1",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Address1",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Address2",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Address2",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Address3",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Address3",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "City",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "City",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Post Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Post Code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Item to order",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Item to order",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Actual Visit Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Actual Visit Date",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Actual Visit Time",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Actual Visit Time",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "AM / PM",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AM / PM",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Pass-Fail",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Pass-Fail",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Pass-Fail2",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Pass-Fail2",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Abort Reason",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Abort Reason",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Extra Site 1",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Extra Site 1",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Excel1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "VariableTable",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "HistoricalDataV3"
								}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Excel1')]",
				"[concat(variables('factoryId'), '/datasets/VariableTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HistoricalDataImport')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "HistoricalDataImport_AuditsOnly",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "HistoricalDataImport_AuditsOnly",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"InputExcel": {},
									"ExistingClients": {},
									"ExistingSites": {},
									"ExistingOrders": {},
									"ExistingAudits": {},
									"MergedOrders": {},
									"MergedAudits": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/HistoricalDataImport_AuditsOnly')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RefreshReports')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get PowerBI Auth",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get Admin PW",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get Admin User",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://login.microsoftonline.com/common/oauth2/token",
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"body": {
								"value": "grant_type=password&client_id=4187986e-76b7-434c-9c73-3b23d505e1f0&resource=https://analysis.windows.net/powerbi/api&scope=openid&username=@{activity('Get Admin User').output.value}&password=@{activity('Get Admin PW').output.value}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup Reports",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get PowerBI Auth",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ClientReports",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Refresh Reports",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Reports",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Reports').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Refresh Report",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "https://api.powerbi.com/v1.0/myorg/groups/@{item().WorkspaceId}/datasets/@{item().DataSourceId}/refreshes",
											"type": "Expression"
										},
										"method": "POST",
										"headers": {
											"Authorization": {
												"value": "Bearer @{activity('Get PowerBI Auth').output.access_token}",
												"type": "Expression"
											}
										},
										"body": "{ok: 1}"
									}
								}
							]
						}
					},
					{
						"name": "Get Admin PW",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://serve-legal-reports.vault.azure.net/secrets/serve-legal-powerbi-admin-pwd?api-version=7.0",
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Get Admin User",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://serve-legal-reports.vault.azure.net/secrets/serve-legal-powerbi-admin-user?api-version=7.0",
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ClientReports')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SimpleSyncClients')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SimpleMergeClient",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SimpleMergeClient",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagingClients": {},
									"ExistingClients": {},
									"MergedClients": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SimpleMergeClient')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StagingToDWDecision')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Check Audits in staging",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select  \n  (select count(*) from dbo.staging_Answers) +\n  -- (select count(*) from dbo.staging_Auditors) +\n  (select count(*) from dbo.staging_Audits) +\n  (select count(*) from dbo.staging_Clients) +\n  (select count(*) from dbo.staging_Orders) +\n  (select count(*) from dbo.staging_Questions) +\n  (select count(*) from dbo.staging_QuestionTemplates) +\n  (select count(*) from dbo.staging_Revisions) +\n  (select count(*) from dbo.staging_Sites) +\n  (select count(*) from dbo.staging_Surveys) +\n  (select count(*) from dbo.staging_Users)\n  as count",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DW",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Has audit rows",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Audits in staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Check Audits in staging').output.firstRow.count, 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Start Staging to DW Merge",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "StagingToDWEntities",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DW')]",
				"[concat(variables('factoryId'), '/pipelines/StagingToDWEntities')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StagingToDWEntities')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "StagingToDWOrders",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "StagingToDWOrders",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Staging": {},
									"Existing": {},
									"Merge": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "ttl10-pipeline",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "StagingToDWAuditors",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "StagingToDWOrders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "StagingToDWAuditors",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Staging": {},
									"Existing": {},
									"Merge": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "ttl10-pipeline",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "StagingToDWQuestionTemplates",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "StagingToDWAuditors",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "StagingToDWQuestionTemplates",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Staging": {},
									"Existing": {},
									"Merge": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "ttl10-pipeline",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "StagingToDWRevisions",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "StagingToDWQuestionTemplates",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "StagingToDWRevisions",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Staging": {},
									"Existing": {},
									"Merge": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "ttl10-pipeline",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "StagingToDWAudits",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "StagingToDWRevisions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "StagingToDWAudits",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Staging": {},
									"Existing": {},
									"Merge": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "ttl10-pipeline",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "StagingToDWSurveys",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "StagingToDWAudits",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "StagingToDWSurveys",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Staging": {},
									"Existing": {},
									"Merge": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "ttl10-pipeline",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "StagingToDWUsers",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "StagingToDWSurveys",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "StagingToDWUsers",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Staging": {},
									"Existing": {},
									"Merge": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "ttl10-pipeline",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "StagingToDWQuestions",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "StagingToDWUsers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "StagingToDWQuestions",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Staging": {},
									"Existing": {},
									"Merge": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "ttl10-pipeline",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "StagingToDWAnswers",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "StagingToDWQuestions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "StagingToDWAnswers",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Staging": {},
									"Existing": {},
									"Merge": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "ttl10-pipeline",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "StagingToDWClients",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "StagingToDWAnswers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "StagingToDWClients",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Staging": {},
									"Existing": {},
									"Merge": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "ttl10-pipeline",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "StagingToDWSites",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "StagingToDWClients",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "StagingToDWSites",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Staging": {},
									"Existing": {},
									"Merge": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "ttl10-pipeline",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Refresh existing reports",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Calculate Avarages",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "RefreshReports",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Calculate Avarages",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "StagingToDWSites",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CalculateAverages",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/StagingToDWOrders')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/ttl10-pipeline')]",
				"[concat(variables('factoryId'), '/dataflows/StagingToDWAuditors')]",
				"[concat(variables('factoryId'), '/dataflows/StagingToDWQuestionTemplates')]",
				"[concat(variables('factoryId'), '/dataflows/StagingToDWRevisions')]",
				"[concat(variables('factoryId'), '/dataflows/StagingToDWAudits')]",
				"[concat(variables('factoryId'), '/dataflows/StagingToDWSurveys')]",
				"[concat(variables('factoryId'), '/dataflows/StagingToDWUsers')]",
				"[concat(variables('factoryId'), '/dataflows/StagingToDWQuestions')]",
				"[concat(variables('factoryId'), '/dataflows/StagingToDWAnswers')]",
				"[concat(variables('factoryId'), '/dataflows/StagingToDWClients')]",
				"[concat(variables('factoryId'), '/dataflows/StagingToDWSites')]",
				"[concat(variables('factoryId'), '/pipelines/RefreshReports')]",
				"[concat(variables('factoryId'), '/pipelines/CalculateAverages')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StagingToDWEntities_Partial')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "StagingToDWSites",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "StagingToDWClients",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "StagingToDWSites",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Staging": {},
									"Existing": {},
									"Merge": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "StagingToDWClients",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "StagingToDWClients",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Staging": {},
									"Existing": {},
									"Merge": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/StagingToDWSites')]",
				"[concat(variables('factoryId'), '/dataflows/StagingToDWClients')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipe')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Process Excel Upload",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "6.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF OBJECT_ID('@{pipeline().parameters.TransferTableName}') IS NOT NULL \n  TRUNCATE TABLE @{pipeline().parameters.TransferTableName}\n",
									"type": "Expression"
								},
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Order",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Order",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Client",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Client",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Visit",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Visit",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Site",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Site",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Premises Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Premises Name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Address1",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Address1",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Address2",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Address2",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Address3",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Address3",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "City",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "City",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Post Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Post Code",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Item to order",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Item to order",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Actual Visit Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Actual Visit Date",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Actual Visit Time",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Actual Visit Time",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "AM / PM",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AM / PM",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Pass-Fail",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Pass-Fail",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Pass-Fail2",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Pass-Fail2",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Abort Reason",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Abort Reason",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Extra Site 1",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Extra Site 1",
											"type": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false,
									"dateTimeFormat": "dd/MM/yyyy"
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Excel1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "azure_dw_importing",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@pipeline().parameters.TransferTableName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Collect New Clients",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Process Excel Upload",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "6.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select Client, newid() UniqueId from @{pipeline().parameters.TransferTableName} GROUP BY Client",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "drop table if exists dbo.clients_importing\n",
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Client",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Client",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "UniqueId",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										},
										"sink": {
											"name": "UniqueId",
											"type": "Guid"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "azure_dw_importing_noparam",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "azure_dw_importing",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "clients_importing"
								}
							}
						]
					},
					{
						"name": "Put Clients into Warehouse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Collect New Clients",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"additionalColumns": [
									{
										"name": "Source",
										"value": "Import"
									}
								],
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "delete from Clients where entity_source = 'Import'",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Client",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "internal_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UniqueId",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Source"
										},
										"sink": {
											"name": "entity_source",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "azure_dw_importing",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "clients_importing"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Clients",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Collect New Orders",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Put Clients into Warehouse",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select [Order], max([Item To Order]) item_to_order, \n(select top 1 id from clients where clients.internal_id = @{pipeline().parameters.TransferTableName}.Client) clientId,\nnewid() UniqueId \nfrom @{pipeline().parameters.TransferTableName}\nGROUP BY [Order], [Client]",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "drop table if exists orders_importing",
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Order",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Order",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UniqueId",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										},
										"sink": {
											"name": "UniqueId",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										}
									},
									{
										"source": {
											"name": "item_to_order",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "item_to_order",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "clientId",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ClientId"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "azure_dw_importing_noparam",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "azure_dw_importing",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "orders_importing"
								}
							}
						]
					},
					{
						"name": "Put Orders into Warehouse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Collect New Orders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"additionalColumns": [
									{
										"name": "Source",
										"value": "Import"
									}
								],
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "delete from Orders where entity_source = 'Import'",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Order",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "internal_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UniqueId",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Source"
										},
										"sink": {
											"name": "entity_source",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "item_to_order",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "item_to_order",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ClientId"
										},
										"sink": {
											"name": "client_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "azure_dw_importing",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "orders_importing"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Orders",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Collect New Sites",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Put Clients into Warehouse",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "6.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "WITH unique_site_references AS ( SELECT DISTINCT Site FROM -- historic_zed3_importing @{pipeline().parameters.TransferTableName} -- WHERE -- Site not in select distinct internal_id from Sites ) SELECT s.Site, newid() UniqueId, (select top 1 c.id from Clients c where c.internal_id = a.Client) ClientId, a.Client, a.Address1, a.Address2, a.Address3, a.[Premises Name], a.City, a.[Post Code] FROM unique_site_references s CROSS APPLY ( SELECT top 1 i.* FROM -- historic_zed3_importing @{pipeline().parameters.TransferTableName} i WHERE i.Site = s.Site ) a",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "drop table if exists dbo.sites_importing\n",
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Site",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Site",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "UniqueId",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										},
										"sink": {
											"name": "UniqueId",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "ClientId",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ClientId"
										}
									},
									{
										"source": {
											"name": "Address1"
										},
										"sink": {
											"name": "Address1"
										}
									},
									{
										"source": {
											"name": "Address2"
										},
										"sink": {
											"name": "Address2"
										}
									},
									{
										"source": {
											"name": "Address3"
										},
										"sink": {
											"name": "Address3"
										}
									},
									{
										"source": {
											"name": "City"
										},
										"sink": {
											"name": "City"
										}
									},
									{
										"source": {
											"name": "Premises Name"
										},
										"sink": {
											"name": "Premises Name"
										}
									},
									{
										"source": {
											"name": "Post Code"
										},
										"sink": {
											"name": "Post Code"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "azure_dw_importing_noparam",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "azure_dw_importing",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sites_importing"
								}
							}
						]
					},
					{
						"name": "Put Sites into Warehouse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Collect New Sites",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"additionalColumns": [
									{
										"name": "Source",
										"value": "Import"
									},
									{
										"name": "SiteStatus",
										"value": "active"
									}
								],
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "delete from Sites where entity_source = 'Import'",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "UniqueId",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Site",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "internal_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ClientId"
										},
										"sink": {
											"name": "client_id"
										}
									},
									{
										"source": {
											"name": "Source"
										},
										"sink": {
											"name": "entity_source",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Address1"
										},
										"sink": {
											"name": "address_1"
										}
									},
									{
										"source": {
											"name": "Address2"
										},
										"sink": {
											"name": "address_2"
										}
									},
									{
										"source": {
											"name": "Address3"
										},
										"sink": {
											"name": "address_3"
										}
									},
									{
										"source": {
											"name": "Post Code"
										},
										"sink": {
											"name": "post_code"
										}
									},
									{
										"source": {
											"name": "City"
										},
										"sink": {
											"name": "city"
										}
									},
									{
										"source": {
											"name": "Premises Name"
										},
										"sink": {
											"name": "name"
										}
									},
									{
										"source": {
											"name": "SiteStatus"
										},
										"sink": {
											"name": "status"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "azure_dw_importing",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sites_importing"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Sites",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Collect New Audits",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Put Sites into Warehouse",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Put Orders into Warehouse",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "6.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select \n  hi.Visit,\n  isnull(audits.id, newid()) UniqueId,\n  case \n    when audits.id is null then 'new'\n    else 'update'\n  end UpdateStatus,\n  convert(\n    datetimeoffset,\n    concat(hi.[Actual Visit Date], ' ', cast(cast(hi.[Actual Visit Time] as time) as varchar(8)), [AM / PM]),\n    103) VisitDate,\n  sites.id SiteId,\n  orders.id OrderId,\n  [Pass-Fail],\n  [Pass-Fail2],\n  [Abort Reason],\n  [Item to order]\nfrom \n  @{pipeline().parameters.TransferTableName} hi\n    OUTER APPLY (\n      select a.id from Audits a where a.internal_id = hi.Visit\n    ) audits\n    OUTER APPLY (\n      select s.id from Sites s where s.internal_id = hi.Site\n    ) sites\n    OUTER APPLY (\n      select o.id from Orders o where o.internal_id = hi.[Order]\n    ) orders\t\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "drop table if exists dbo.audits_importing\ndelete from Audits where entity_source = 'Import'\n",
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Visit"
										},
										"sink": {
											"name": "Visit"
										}
									},
									{
										"source": {
											"name": "UniqueId"
										},
										"sink": {
											"name": "UniqueId"
										}
									},
									{
										"source": {
											"name": "SiteId"
										},
										"sink": {
											"name": "SiteId"
										}
									},
									{
										"source": {
											"name": "OrderId"
										},
										"sink": {
											"name": "OrderId"
										}
									},
									{
										"source": {
											"name": "Pass-Fail"
										},
										"sink": {
											"name": "Pass-Fail"
										}
									},
									{
										"source": {
											"name": "Pass-Fail2"
										},
										"sink": {
											"name": "Pass-Fail2"
										}
									},
									{
										"source": {
											"name": "UpdateStatus"
										},
										"sink": {
											"name": "UpdateStatus"
										}
									},
									{
										"source": {
											"name": "VisitDate"
										},
										"sink": {
											"name": "VisitDate"
										}
									},
									{
										"source": {
											"name": "Item to order"
										},
										"sink": {
											"name": "Item to order"
										}
									},
									{
										"source": {
											"name": "Abort Reason"
										},
										"sink": {
											"name": "Abort Reason"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "azure_dw_importing_noparam",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "azure_dw_importing",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "audits_importing"
								}
							}
						]
					},
					{
						"name": "Put Audits into Warehouse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Collect New Audits",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"additionalColumns": [
									{
										"name": "Source",
										"value": "Import"
									},
									{
										"name": "AuditStatus",
										"value": "approved"
									}
								],
								"sqlReaderQuery": {
									"value": "select * from audits_importing where UpdateStatus = 'new'\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "delete from Audits where entity_source = 'Import'",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "UniqueId",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Visit"
										},
										"sink": {
											"name": "internal_id"
										}
									},
									{
										"source": {
											"name": "Source"
										},
										"sink": {
											"name": "entity_source"
										}
									},
									{
										"source": {
											"name": "OrderId"
										},
										"sink": {
											"name": "order_id"
										}
									},
									{
										"source": {
											"name": "SiteId"
										},
										"sink": {
											"name": "site_id"
										}
									},
									{
										"source": {
											"name": "VisitDate"
										},
										"sink": {
											"name": "date_of_visit"
										}
									},
									{
										"source": {
											"name": "Pass-Fail"
										},
										"sink": {
											"name": "survey_result"
										}
									},
									{
										"source": {
											"name": "Item to order"
										},
										"sink": {
											"name": "item_to_order"
										}
									},
									{
										"source": {
											"name": "AuditStatus"
										},
										"sink": {
											"name": "status"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "azure_dw_importing",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "audits_importing"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Audits",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"parameters": {
					"TransferTableName": {
						"type": "string",
						"defaultValue": "historic_importing"
					},
					"Feature": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-09-07T15:15:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Excel1')]",
				"[concat(variables('factoryId'), '/datasets/azure_dw_importing')]",
				"[concat(variables('factoryId'), '/datasets/azure_dw_importing_noparam')]",
				"[concat(variables('factoryId'), '/datasets/Clients')]",
				"[concat(variables('factoryId'), '/datasets/Orders')]",
				"[concat(variables('factoryId'), '/datasets/Sites')]",
				"[concat(variables('factoryId'), '/datasets/Audits')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Process Excel Upload",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "6.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "truncate table @{pipeline().parameters.TransferTableName}",
									"type": "Expression"
								},
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Order",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Order",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Client",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Client",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Visit",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Visit",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Site",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Site",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Premises Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Premises Name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Address1",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Address1",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Address2",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Address2",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Address3",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Address3",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "City",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "City",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Post Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Post Code",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Item to order",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Item to order",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Actual Visit Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Actual Visit Date",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Actual Visit Time",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Actual Visit Time",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "AM / PM",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AM / PM",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Pass-Fail",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Pass-Fail",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Pass-Fail2",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Pass-Fail2",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Abort Reason",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Abort Reason",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Extra Site 1",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Extra Site 1",
											"type": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false,
									"dateTimeFormat": "dd/MM/yyyy"
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Excel1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "azure_dw_importing",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@pipeline().parameters.TransferTableName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Collect New Clients",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Process Excel Upload",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "6.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select Client, newid() UniqueId from @{pipeline().parameters.TransferTableName} GROUP BY Client",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "drop table if exists dbo.clients_importing",
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Client",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Client",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "UniqueId",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										},
										"sink": {
											"name": "UniqueId",
											"type": "Guid"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "azure_dw_importing_noparam",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "azure_dw_importing",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "clients_importing"
								}
							}
						]
					},
					{
						"name": "Put Clients into Warehouse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Collect New Clients",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"additionalColumns": [
									{
										"name": "Source",
										"value": "Import"
									}
								],
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "delete from Clients where entity_source = 'Import'",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Client",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "internal_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UniqueId",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Source"
										},
										"sink": {
											"name": "entity_source",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "azure_dw_importing",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "clients_importing"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Clients",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Collect New Orders",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Put Clients into Warehouse",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select [Order], max([Item To Order]) item_to_order, \n(select top 1 id from clients where clients.internal_id = historic_3m_importing.Client) clientId,\nnewid() UniqueId \nfrom @{pipeline().parameters.TransferTableName}\nGROUP BY [Order], [Client]",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "drop table if exists orders_importing",
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Order",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Order",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UniqueId",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										},
										"sink": {
											"name": "UniqueId",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										}
									},
									{
										"source": {
											"name": "item_to_order",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "item_to_order",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "clientId",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ClientId"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "azure_dw_importing_noparam",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "azure_dw_importing",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "orders_importing"
								}
							}
						]
					},
					{
						"name": "Put Orders into Warehouse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Collect New Orders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"additionalColumns": [
									{
										"name": "Source",
										"value": "Import"
									}
								],
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "delete from Orders where entity_source = 'Import'",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Order",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "internal_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UniqueId",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Source"
										},
										"sink": {
											"name": "entity_source",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "item_to_order",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "item_to_order",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ClientId"
										},
										"sink": {
											"name": "client_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "azure_dw_importing",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "orders_importing"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Orders",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Collect New Sites",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Put Clients into Warehouse",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "6.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select [Site], (select top 1 id from clients where clients.internal_id = @{pipeline().parameters.TransferTableName}.Client) clientId, newid() UniqueId  from @{pipeline().parameters.TransferTableName} GROUP BY [Site], [Client]",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "drop table if exists dbo.sites_importing",
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Site",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Site",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "UniqueId",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										},
										"sink": {
											"name": "UniqueId",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "clientId",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ClientId"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "azure_dw_importing_noparam",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "azure_dw_importing",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sites_importing"
								}
							}
						]
					},
					{
						"name": "If DoSomething",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Process Excel Upload",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.Feature",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select Site, newid() UniqueId from @{pipeline().parameters.TransferTableName} GROUP BY Site",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": "drop table if exists sites_importing",
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Site",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "Site",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "UniqueId",
														"type": "Guid",
														"physicalType": "uniqueidentifier"
													},
													"sink": {
														"name": "UniqueId",
														"type": "Guid"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "azure_dw_importing_noparam",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "azure_dw_importing",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "sites_importing"
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"TransferTableName": {
						"type": "string",
						"defaultValue": "historic_3m_importing"
					},
					"Feature": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-09-07T15:15:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Excel1')]",
				"[concat(variables('factoryId'), '/datasets/azure_dw_importing')]",
				"[concat(variables('factoryId'), '/datasets/azure_dw_importing_noparam')]",
				"[concat(variables('factoryId'), '/datasets/Clients')]",
				"[concat(variables('factoryId'), '/datasets/Orders')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Process Excel Upload",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "6.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF OBJECT_ID('@{pipeline().parameters.TransferTableName}') IS NOT NULL \n  TRUNCATE TABLE @{pipeline().parameters.TransferTableName}\n",
									"type": "Expression"
								},
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Order",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Order",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Client",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Client",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Visit",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Visit",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Site",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Site",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Premises Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Premises Name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Address1",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Address1",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Address2",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Address2",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Address3",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Address3",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "City",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "City",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Post Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Post Code",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Item to order",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Item to order",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Actual Visit Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Actual Visit Date",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Actual Visit Time",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Actual Visit Time",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "AM / PM",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AM / PM",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Pass-Fail",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Pass-Fail",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Pass-Fail2",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Pass-Fail2",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Abort Reason",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Abort Reason",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Extra Site 1",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Extra Site 1",
											"type": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false,
									"dateTimeFormat": "dd/MM/yyyy"
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Excel1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "azure_dw_importing",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@pipeline().parameters.TransferTableName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Collect New Clients",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Process Excel Upload",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "6.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select Client, newid() UniqueId from @{pipeline().parameters.TransferTableName} GROUP BY Client",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "drop table if exists dbo.clients_importing",
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Client",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Client",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "UniqueId",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										},
										"sink": {
											"name": "UniqueId",
											"type": "Guid"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "azure_dw_importing_noparam",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "azure_dw_importing",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "clients_importing"
								}
							}
						]
					},
					{
						"name": "Put Clients into Warehouse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Collect New Clients",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"additionalColumns": [
									{
										"name": "Source",
										"value": "Import"
									}
								],
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "delete from Clients where entity_source = 'Import'",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Client",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "internal_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UniqueId",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Source"
										},
										"sink": {
											"name": "entity_source",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "azure_dw_importing",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "clients_importing"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Clients",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Collect New Orders",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Put Clients into Warehouse",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select [Order], max([Item To Order]) item_to_order, \n(select top 1 id from clients where clients.internal_id = @{pipeline().parameters.TransferTableName}.Client) clientId,\nnewid() UniqueId \nfrom @{pipeline().parameters.TransferTableName}\nGROUP BY [Order], [Client]",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "drop table if exists orders_importing",
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Order",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Order",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UniqueId",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										},
										"sink": {
											"name": "UniqueId",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										}
									},
									{
										"source": {
											"name": "item_to_order",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "item_to_order",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "clientId",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ClientId"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "azure_dw_importing_noparam",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "azure_dw_importing",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "orders_importing"
								}
							}
						]
					},
					{
						"name": "Put Orders into Warehouse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Collect New Orders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"additionalColumns": [
									{
										"name": "Source",
										"value": "Import"
									}
								],
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "delete from Orders where entity_source = 'Import'",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Order",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "internal_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UniqueId",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Source"
										},
										"sink": {
											"name": "entity_source",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "item_to_order",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "item_to_order",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ClientId"
										},
										"sink": {
											"name": "client_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "azure_dw_importing",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "orders_importing"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Orders",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Collect New Sites",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Put Clients into Warehouse",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "6.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "WITH \n  unique_site_references AS (\n    SELECT \n      DISTINCT Site \n    FROM\n      -- historic_zed3_importing \n      @{pipeline().parameters.TransferTableName}\t\n    -- WHERE\n      -- Site not in select distinct internal_id from Sites\n  )\nSELECT \n  s.Site,\n  newid() UniqueId,\n  (select top 1 c.id from Clients c where c.internal_id = a.Client) ClientId,\n  a.Client,\n  a.Address1,\n  a.Address2,\n  a.Address3,\n  a.[Premises Name],\n  a.City,\n  a.[Post Code]\nFROM \n  unique_site_references s\nCROSS APPLY (\n  SELECT\n    top 1 i.* \n  FROM\n    -- historic_zed3_importing \n    @{pipeline().parameters.TransferTableName}\n    i\n  WHERE\n    i.Site = s.Site\n) a\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "drop table if exists dbo.sites_importing",
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Site",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Site",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "UniqueId",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										},
										"sink": {
											"name": "UniqueId",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "ClientId",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ClientId"
										}
									},
									{
										"source": {
											"name": "Address1"
										},
										"sink": {
											"name": "Address1"
										}
									},
									{
										"source": {
											"name": "Address2"
										},
										"sink": {
											"name": "Address2"
										}
									},
									{
										"source": {
											"name": "Address3"
										},
										"sink": {
											"name": "Address3"
										}
									},
									{
										"source": {
											"name": "City"
										},
										"sink": {
											"name": "City"
										}
									},
									{
										"source": {
											"name": "Premises Name"
										},
										"sink": {
											"name": "Premises Name"
										}
									},
									{
										"source": {
											"name": "Post Code"
										},
										"sink": {
											"name": "Post Code"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "azure_dw_importing_noparam",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "azure_dw_importing",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sites_importing"
								}
							}
						]
					},
					{
						"name": "Put Sites into Warehouse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Collect New Sites",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"additionalColumns": [
									{
										"name": "Source",
										"value": "Import"
									},
									{
										"name": "SiteStatus",
										"value": "active"
									}
								],
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "delete from Sites where entity_source = 'Import'",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "UniqueId",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Site",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "internal_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ClientId"
										},
										"sink": {
											"name": "client_id"
										}
									},
									{
										"source": {
											"name": "Source"
										},
										"sink": {
											"name": "entity_source",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Address1"
										},
										"sink": {
											"name": "address_1"
										}
									},
									{
										"source": {
											"name": "Address2"
										},
										"sink": {
											"name": "address_2"
										}
									},
									{
										"source": {
											"name": "Address3"
										},
										"sink": {
											"name": "address_3"
										}
									},
									{
										"source": {
											"name": "Post Code"
										},
										"sink": {
											"name": "post_code"
										}
									},
									{
										"source": {
											"name": "City"
										},
										"sink": {
											"name": "city"
										}
									},
									{
										"source": {
											"name": "Premises Name"
										},
										"sink": {
											"name": "name"
										}
									},
									{
										"source": {
											"name": "SiteStatus"
										},
										"sink": {
											"name": "status"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "azure_dw_importing",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sites_importing"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Sites",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Collect New Audits",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Put Sites into Warehouse",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Put Orders into Warehouse",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "6.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select \n  hi.Visit,\n  isnull(audits.id, newid()) UniqueId,\n  case \n    when audits.id is null then 'new'\n    else 'update'\n  end UpdateStatus,\n  convert(\n    datetimeoffset,\n    concat(hi.[Actual Visit Date], ' ', cast(cast(hi.[Actual Visit Time] as time) as varchar(8)), [AM / PM]),\n    103) VisitDate,\n  sites.id SiteId,\n  orders.id OrderId,\n  [Pass-Fail],\n  [Pass-Fail2],\n  [Abort Reason],\n  [Item to order]\nfrom \n  @{pipeline().parameters.TransferTableName} hi\n    OUTER APPLY (\n      select a.id from Audits a where a.internal_id = hi.Visit\n    ) audits\n    OUTER APPLY (\n      select s.id from Sites s where s.internal_id = hi.Site\n    ) sites\n    OUTER APPLY (\n      select o.id from Orders o where o.internal_id = hi.[Order]\n    ) orders\t\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "drop table if exists dbo.audits_importing\ndelete from Audits where entity_source = 'Import'\n",
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Visit"
										},
										"sink": {
											"name": "Visit"
										}
									},
									{
										"source": {
											"name": "UniqueId"
										},
										"sink": {
											"name": "UniqueId"
										}
									},
									{
										"source": {
											"name": "SiteId"
										},
										"sink": {
											"name": "SiteId"
										}
									},
									{
										"source": {
											"name": "OrderId"
										},
										"sink": {
											"name": "OrderId"
										}
									},
									{
										"source": {
											"name": "Pass-Fail"
										},
										"sink": {
											"name": "Pass-Fail"
										}
									},
									{
										"source": {
											"name": "Pass-Fail2"
										},
										"sink": {
											"name": "Pass-Fail2"
										}
									},
									{
										"source": {
											"name": "UpdateStatus"
										},
										"sink": {
											"name": "UpdateStatus"
										}
									},
									{
										"source": {
											"name": "VisitDate"
										},
										"sink": {
											"name": "VisitDate"
										}
									},
									{
										"source": {
											"name": "Item to order"
										},
										"sink": {
											"name": "Item to order"
										}
									},
									{
										"source": {
											"name": "Abort Reason"
										},
										"sink": {
											"name": "Abort Reason"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "azure_dw_importing_noparam",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "azure_dw_importing",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "audits_importing"
								}
							}
						]
					},
					{
						"name": "Put Audits into Warehouse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Collect New Audits",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"additionalColumns": [
									{
										"name": "Source",
										"value": "Import"
									},
									{
										"name": "AuditStatus",
										"value": "approved"
									}
								],
								"sqlReaderQuery": {
									"value": "select * from audits_importing where UpdateStatus = 'new'\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "delete from Audits where entity_source = 'Import'",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "UniqueId",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Visit"
										},
										"sink": {
											"name": "internal_id"
										}
									},
									{
										"source": {
											"name": "Source"
										},
										"sink": {
											"name": "entity_source"
										}
									},
									{
										"source": {
											"name": "OrderId"
										},
										"sink": {
											"name": "order_id"
										}
									},
									{
										"source": {
											"name": "SiteId"
										},
										"sink": {
											"name": "site_id"
										}
									},
									{
										"source": {
											"name": "VisitDate"
										},
										"sink": {
											"name": "date_of_visit"
										}
									},
									{
										"source": {
											"name": "Pass-Fail"
										},
										"sink": {
											"name": "survey_result"
										}
									},
									{
										"source": {
											"name": "Item to order"
										},
										"sink": {
											"name": "item_to_order"
										}
									},
									{
										"source": {
											"name": "AuditStatus"
										},
										"sink": {
											"name": "status"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "azure_dw_importing",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "audits_importing"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Audits",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "If DoSomething",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Process Excel Upload",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.Feature",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select Site, newid() UniqueId from @{pipeline().parameters.TransferTableName} GROUP BY Site",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": "drop table if exists sites_importing",
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Site",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "Site",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "UniqueId",
														"type": "Guid",
														"physicalType": "uniqueidentifier"
													},
													"sink": {
														"name": "UniqueId",
														"type": "Guid"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "azure_dw_importing_noparam",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "azure_dw_importing",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "sites_importing"
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"TransferTableName": {
						"type": "string",
						"defaultValue": "historic_importing"
					},
					"Feature": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-09-07T15:15:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Excel1')]",
				"[concat(variables('factoryId'), '/datasets/azure_dw_importing')]",
				"[concat(variables('factoryId'), '/datasets/azure_dw_importing_noparam')]",
				"[concat(variables('factoryId'), '/datasets/Clients')]",
				"[concat(variables('factoryId'), '/datasets/Orders')]",
				"[concat(variables('factoryId'), '/datasets/Sites')]",
				"[concat(variables('factoryId'), '/datasets/Audits')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AVS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AWS AVS prod replica set",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AWS AVS prod replica set')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Answers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLDataWarehousePRODAuth",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "internal_id",
						"type": "varchar"
					},
					{
						"name": "type",
						"type": "nvarchar"
					},
					{
						"name": "value",
						"type": "nvarchar"
					},
					{
						"name": "hidden",
						"type": "bit"
					},
					{
						"name": "audit_id",
						"type": "varchar"
					},
					{
						"name": "question_template_id",
						"type": "varchar"
					},
					{
						"name": "created_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "modified_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "entity_source",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Answers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLDataWarehousePRODAuth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Auditors')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLDataWarehousePRODAuth",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "internal_id",
						"type": "varchar"
					},
					{
						"name": "email_settings",
						"type": "bit"
					},
					{
						"name": "passport",
						"type": "nvarchar"
					},
					{
						"name": "identification",
						"type": "nvarchar"
					},
					{
						"name": "country",
						"type": "nvarchar"
					},
					{
						"name": "honorific",
						"type": "nvarchar"
					},
					{
						"name": "gender",
						"type": "nvarchar"
					},
					{
						"name": "date_of_birth",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "marital_status",
						"type": "nvarchar"
					},
					{
						"name": "occupation",
						"type": "nvarchar"
					},
					{
						"name": "ni_pps",
						"type": "nvarchar"
					},
					{
						"name": "home_address_1",
						"type": "nvarchar"
					},
					{
						"name": "home_address_2",
						"type": "nvarchar"
					},
					{
						"name": "home_city",
						"type": "nvarchar"
					},
					{
						"name": "home_post_code",
						"type": "nvarchar"
					},
					{
						"name": "home_county",
						"type": "nvarchar"
					},
					{
						"name": "term_address_1",
						"type": "nvarchar"
					},
					{
						"name": "term_address_2",
						"type": "nvarchar"
					},
					{
						"name": "term_city",
						"type": "nvarchar"
					},
					{
						"name": "term_post_code",
						"type": "nvarchar"
					},
					{
						"name": "term_county",
						"type": "nvarchar"
					},
					{
						"name": "mobile_number",
						"type": "nvarchar"
					},
					{
						"name": "home_number",
						"type": "nvarchar"
					},
					{
						"name": "notes",
						"type": "nvarchar"
					},
					{
						"name": "hear_about_us",
						"type": "nvarchar"
					},
					{
						"name": "hear_about_us_details",
						"type": "nvarchar"
					},
					{
						"name": "recommended_by",
						"type": "nvarchar"
					},
					{
						"name": "email_communication",
						"type": "bit"
					},
					{
						"name": "servelegal_community",
						"type": "bit"
					},
					{
						"name": "card_name",
						"type": "nvarchar"
					},
					{
						"name": "bank_country",
						"type": "nvarchar"
					},
					{
						"name": "account_number",
						"type": "nvarchar"
					},
					{
						"name": "sort_code",
						"type": "nvarchar"
					},
					{
						"name": "swift_code",
						"type": "nvarchar"
					},
					{
						"name": "iban_number",
						"type": "nvarchar"
					},
					{
						"name": "circumstances",
						"type": "nvarchar"
					},
					{
						"name": "student_loans",
						"type": "nvarchar"
					},
					{
						"name": "access_to_car",
						"type": "nvarchar"
					},
					{
						"name": "why_servelegal",
						"type": "nvarchar"
					},
					{
						"name": "about_yourself",
						"type": "nvarchar"
					},
					{
						"name": "travel_outside",
						"type": "nvarchar"
					},
					{
						"name": "auditor_status",
						"type": "nvarchar"
					},
					{
						"name": "user_id",
						"type": "varchar"
					},
					{
						"name": "created_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "modified_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "entity_source",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Auditors"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLDataWarehousePRODAuth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Audits')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLDataWarehousePRODAuth",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "internal_id",
						"type": "varchar"
					},
					{
						"name": "query_notes",
						"type": "nvarchar"
					},
					{
						"name": "query_category",
						"type": "nvarchar"
					},
					{
						"name": "survey_result",
						"type": "nvarchar"
					},
					{
						"name": "visit_info",
						"type": "nvarchar"
					},
					{
						"name": "submitted_date",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "approval_date",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "deadline_date",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "date_of_visit",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "purchase_cost",
						"type": "float",
						"precision": 15
					},
					{
						"name": "allowance",
						"type": "float",
						"precision": 15
					},
					{
						"name": "mileage",
						"type": "float",
						"precision": 15
					},
					{
						"name": "entrance_charge",
						"type": "float",
						"precision": 15
					},
					{
						"name": "travel_expenses",
						"type": "float",
						"precision": 15
					},
					{
						"name": "travel_expenses_type",
						"type": "nvarchar"
					},
					{
						"name": "travel_expenses_description",
						"type": "nvarchar"
					},
					{
						"name": "reclaimable_expenses",
						"type": "float",
						"precision": 15
					},
					{
						"name": "reclaimable_expenses_type",
						"type": "nvarchar"
					},
					{
						"name": "reclaimable_expenses_description",
						"type": "nvarchar"
					},
					{
						"name": "paid",
						"type": "bit"
					},
					{
						"name": "batched",
						"type": "bit"
					},
					{
						"name": "payroll_date",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "pay_date",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "email_note",
						"type": "nvarchar"
					},
					{
						"name": "status",
						"type": "nvarchar"
					},
					{
						"name": "order_id",
						"type": "varchar"
					},
					{
						"name": "site_id",
						"type": "varchar"
					},
					{
						"name": "approved_by_id",
						"type": "varchar"
					},
					{
						"name": "auditor_id",
						"type": "varchar"
					},
					{
						"name": "item_to_order",
						"type": "nvarchar"
					},
					{
						"name": "auditor_instructions",
						"type": "nvarchar"
					},
					{
						"name": "auditor_pay_per_audit",
						"type": "float",
						"precision": 15
					},
					{
						"name": "approving_notes",
						"type": "nvarchar"
					},
					{
						"name": "created_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "modified_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "entity_source",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Audits"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLDataWarehousePRODAuth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ClientReports')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLDataWarehousePRODAuth",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "varchar"
					},
					{
						"name": "ClientId",
						"type": "varchar"
					},
					{
						"name": "ReportTemplateId",
						"type": "varchar"
					},
					{
						"name": "ReportName",
						"type": "nvarchar"
					},
					{
						"name": "ReportId",
						"type": "varchar"
					},
					{
						"name": "WorkspaceId",
						"type": "varchar"
					},
					{
						"name": "Created_at",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "Updated_at",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "DataSourceId",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "ClientReports"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLDataWarehousePRODAuth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Clients')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLDataWarehousePRODAuth",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "internal_id",
						"type": "varchar"
					},
					{
						"name": "legacy_id",
						"type": "varchar"
					},
					{
						"name": "name",
						"type": "nvarchar"
					},
					{
						"name": "logo",
						"type": "nvarchar"
					},
					{
						"name": "footer",
						"type": "nvarchar"
					},
					{
						"name": "client_type",
						"type": "nvarchar"
					},
					{
						"name": "sage_reference",
						"type": "nvarchar"
					},
					{
						"name": "manager_id",
						"type": "varchar"
					},
					{
						"name": "contract_expiry",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "store_locator",
						"type": "nvarchar"
					},
					{
						"name": "status",
						"type": "nvarchar"
					},
					{
						"name": "created_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "modified_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "org_level1_name",
						"type": "nvarchar"
					},
					{
						"name": "org_level2_name",
						"type": "nvarchar"
					},
					{
						"name": "org_level3_name",
						"type": "nvarchar"
					},
					{
						"name": "org_level4_name",
						"type": "nvarchar"
					},
					{
						"name": "entity_source",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Clients"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLDataWarehousePRODAuth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DW')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLDataWarehousePRODAuth",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLDataWarehousePRODAuth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimYesNo')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLDataWarehousePRODAuth",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "bitValue",
						"type": "bit"
					},
					{
						"name": "stringValue",
						"type": "nvarchar"
					},
					{
						"name": "valueType",
						"type": "nvarchar"
					},
					{
						"name": "created_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "modified_at",
						"type": "datetimeoffset",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Dim_YesNo"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLDataWarehousePRODAuth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ErrorOutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLDataWarehousePRODAuth",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"table_name": {
						"type": "string",
						"defaultValue": "t_error"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLDataWarehousePRODAuth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Excel1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "3 year data v1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "3 year data v3.xlsx",
						"container": "audits"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Order",
						"type": "String"
					},
					{
						"name": "Client",
						"type": "String"
					},
					{
						"name": "Visit",
						"type": "String"
					},
					{
						"name": "Site",
						"type": "String"
					},
					{
						"name": "Premises Name",
						"type": "String"
					},
					{
						"name": "Address1",
						"type": "String"
					},
					{
						"name": "Address2",
						"type": "String"
					},
					{
						"name": "Address3",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "Post Code",
						"type": "String"
					},
					{
						"name": "Item to order",
						"type": "String"
					},
					{
						"name": "Actual Visit Date",
						"type": "String"
					},
					{
						"name": "Actual Visit Time",
						"type": "String"
					},
					{
						"name": "AM / PM",
						"type": "String"
					},
					{
						"name": "Pass-Fail",
						"type": "String"
					},
					{
						"name": "Pass-Fail2",
						"type": "String"
					},
					{
						"name": "Abort Reason",
						"type": "String"
					},
					{
						"name": "Extra Site 1",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Orders')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLDataWarehousePRODAuth",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "internal_id",
						"type": "varchar"
					},
					{
						"name": "schedule_type",
						"type": "nvarchar"
					},
					{
						"name": "item_to_order",
						"type": "nvarchar"
					},
					{
						"name": "order_info",
						"type": "nvarchar"
					},
					{
						"name": "visits_to_be_billed",
						"type": "int",
						"precision": 10
					},
					{
						"name": "start_date",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "end_date",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "auditor_pay_per_audit",
						"type": "nvarchar"
					},
					{
						"name": "client_charge_per_audit",
						"type": "nvarchar"
					},
					{
						"name": "auditor_instructions",
						"type": "nvarchar"
					},
					{
						"name": "email_subject",
						"type": "nvarchar"
					},
					{
						"name": "email_survey_result",
						"type": "nvarchar"
					},
					{
						"name": "exclude_from_client_reporting",
						"type": "bit"
					},
					{
						"name": "narv_visits_only",
						"type": "bit"
					},
					{
						"name": "status",
						"type": "nvarchar"
					},
					{
						"name": "currency",
						"type": "nvarchar"
					},
					{
						"name": "client_id",
						"type": "varchar"
					},
					{
						"name": "revision_id",
						"type": "varchar"
					},
					{
						"name": "created_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "modified_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "entity_source",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Orders"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLDataWarehousePRODAuth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/QuestionTemplates')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLDataWarehousePRODAuth",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "internal_id",
						"type": "varchar"
					},
					{
						"name": "help",
						"type": "nvarchar"
					},
					{
						"name": "title",
						"type": "nvarchar"
					},
					{
						"name": "required",
						"type": "bit"
					},
					{
						"name": "type",
						"type": "nvarchar"
					},
					{
						"name": "config",
						"type": "nvarchar"
					},
					{
						"name": "category",
						"type": "nvarchar"
					},
					{
						"name": "created_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "modified_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "entity_source",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "QuestionTemplates"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLDataWarehousePRODAuth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Questions')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLDataWarehousePRODAuth",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "internal_id",
						"type": "varchar"
					},
					{
						"name": "help",
						"type": "nvarchar"
					},
					{
						"name": "type",
						"type": "nvarchar"
					},
					{
						"name": "title",
						"type": "nvarchar"
					},
					{
						"name": "required",
						"type": "bit"
					},
					{
						"name": "category",
						"type": "nvarchar"
					},
					{
						"name": "config",
						"type": "nvarchar"
					},
					{
						"name": "question_template_id",
						"type": "varchar"
					},
					{
						"name": "revision_id",
						"type": "varchar"
					},
					{
						"name": "created_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "modified_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "entity_source",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Questions"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLDataWarehousePRODAuth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Revisions')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLDataWarehousePRODAuth",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "internal_id",
						"type": "varchar"
					},
					{
						"name": "status",
						"type": "nvarchar"
					},
					{
						"name": "name",
						"type": "nvarchar"
					},
					{
						"name": "survey_id",
						"type": "varchar"
					},
					{
						"name": "blocked",
						"type": "bit"
					},
					{
						"name": "created_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "modified_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "entity_source",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Revisions"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLDataWarehousePRODAuth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sites')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLDataWarehousePRODAuth",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "internal_id",
						"type": "varchar"
					},
					{
						"name": "legacy_id",
						"type": "varchar"
					},
					{
						"name": "name",
						"type": "nvarchar"
					},
					{
						"name": "address_1",
						"type": "nvarchar"
					},
					{
						"name": "address_2",
						"type": "nvarchar"
					},
					{
						"name": "address_3",
						"type": "nvarchar"
					},
					{
						"name": "city",
						"type": "nvarchar"
					},
					{
						"name": "post_code",
						"type": "nvarchar"
					},
					{
						"name": "county",
						"type": "nvarchar"
					},
					{
						"name": "country",
						"type": "nvarchar"
					},
					{
						"name": "directions",
						"type": "nvarchar"
					},
					{
						"name": "approving_notes",
						"type": "nvarchar"
					},
					{
						"name": "code",
						"type": "nvarchar"
					},
					{
						"name": "status",
						"type": "nvarchar"
					},
					{
						"name": "client_id",
						"type": "varchar"
					},
					{
						"name": "created_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "modified_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "org_level1",
						"type": "nvarchar"
					},
					{
						"name": "org_level2",
						"type": "nvarchar"
					},
					{
						"name": "org_level3",
						"type": "nvarchar"
					},
					{
						"name": "org_level4",
						"type": "nvarchar"
					},
					{
						"name": "entity_source",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Sites"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLDataWarehousePRODAuth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Surveys')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLDataWarehousePRODAuth",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "internal_id",
						"type": "varchar"
					},
					{
						"name": "title",
						"type": "nvarchar"
					},
					{
						"name": "created_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "modified_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "entity_source",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Surveys"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLDataWarehousePRODAuth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TestImport')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLDataWarehousePRODAuth",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Order",
						"type": "nvarchar"
					},
					{
						"name": "Client",
						"type": "nvarchar"
					},
					{
						"name": "Visit",
						"type": "nvarchar"
					},
					{
						"name": "Site",
						"type": "nvarchar"
					},
					{
						"name": "Premises Name",
						"type": "nvarchar"
					},
					{
						"name": "Address1",
						"type": "nvarchar"
					},
					{
						"name": "Address2",
						"type": "nvarchar"
					},
					{
						"name": "Address3",
						"type": "nvarchar"
					},
					{
						"name": "City",
						"type": "nvarchar"
					},
					{
						"name": "Post Code",
						"type": "nvarchar"
					},
					{
						"name": "Item to order",
						"type": "nvarchar"
					},
					{
						"name": "Actual Visit Date",
						"type": "nvarchar"
					},
					{
						"name": "Actual Visit Time",
						"type": "nvarchar"
					},
					{
						"name": "AM / PM",
						"type": "nvarchar"
					},
					{
						"name": "Pass-Fail",
						"type": "nvarchar"
					},
					{
						"name": "Pass-Fail2",
						"type": "nvarchar"
					},
					{
						"name": "Abort Reason",
						"type": "nvarchar"
					},
					{
						"name": "Extra Site 1",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "test_visits"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLDataWarehousePRODAuth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Users')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLDataWarehousePRODAuth",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "internal_id",
						"type": "varchar"
					},
					{
						"name": "first_name",
						"type": "nvarchar"
					},
					{
						"name": "middle_name",
						"type": "nvarchar"
					},
					{
						"name": "last_name",
						"type": "nvarchar"
					},
					{
						"name": "email",
						"type": "nvarchar"
					},
					{
						"name": "image",
						"type": "nvarchar"
					},
					{
						"name": "status",
						"type": "nvarchar"
					},
					{
						"name": "notify_user",
						"type": "bit"
					},
					{
						"name": "role",
						"type": "nvarchar"
					},
					{
						"name": "last_access",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "client_id",
						"type": "nvarchar"
					},
					{
						"name": "created_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "modified_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "entity_source",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Users"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLDataWarehousePRODAuth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VariableTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLDataWarehousePRODAuth",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLDataWarehousePRODAuth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/azure_dw_importing')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/azure_dw_importing_noparam')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/staging_Answers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLDataWarehousePRODAuth",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "row_id",
						"type": "varchar"
					},
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "internal_id",
						"type": "varchar"
					},
					{
						"name": "type",
						"type": "nvarchar"
					},
					{
						"name": "value",
						"type": "nvarchar"
					},
					{
						"name": "hidden",
						"type": "bit"
					},
					{
						"name": "audit_id",
						"type": "varchar"
					},
					{
						"name": "question_template_id",
						"type": "varchar"
					},
					{
						"name": "created_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "modified_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "entity_source",
						"type": "nvarchar"
					},
					{
						"name": "insert_date",
						"type": "datetimeoffset",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "staging_Answers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLDataWarehousePRODAuth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/staging_Auditors')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLDataWarehousePRODAuth",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "row_id",
						"type": "varchar"
					},
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "internal_id",
						"type": "varchar"
					},
					{
						"name": "email_settings",
						"type": "bit"
					},
					{
						"name": "passport",
						"type": "nvarchar"
					},
					{
						"name": "identification",
						"type": "nvarchar"
					},
					{
						"name": "country",
						"type": "nvarchar"
					},
					{
						"name": "honorific",
						"type": "nvarchar"
					},
					{
						"name": "gender",
						"type": "nvarchar"
					},
					{
						"name": "date_of_birth",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "marital_status",
						"type": "nvarchar"
					},
					{
						"name": "occupation",
						"type": "nvarchar"
					},
					{
						"name": "ni_pps",
						"type": "nvarchar"
					},
					{
						"name": "home_address_1",
						"type": "nvarchar"
					},
					{
						"name": "home_address_2",
						"type": "nvarchar"
					},
					{
						"name": "home_city",
						"type": "nvarchar"
					},
					{
						"name": "home_post_code",
						"type": "nvarchar"
					},
					{
						"name": "home_county",
						"type": "nvarchar"
					},
					{
						"name": "term_address_1",
						"type": "nvarchar"
					},
					{
						"name": "term_address_2",
						"type": "nvarchar"
					},
					{
						"name": "term_city",
						"type": "nvarchar"
					},
					{
						"name": "term_post_code",
						"type": "nvarchar"
					},
					{
						"name": "term_county",
						"type": "nvarchar"
					},
					{
						"name": "mobile_number",
						"type": "nvarchar"
					},
					{
						"name": "home_number",
						"type": "nvarchar"
					},
					{
						"name": "notes",
						"type": "nvarchar"
					},
					{
						"name": "hear_about_us",
						"type": "nvarchar"
					},
					{
						"name": "hear_about_us_details",
						"type": "nvarchar"
					},
					{
						"name": "recommended_by",
						"type": "nvarchar"
					},
					{
						"name": "email_communication",
						"type": "bit"
					},
					{
						"name": "servelegal_community",
						"type": "bit"
					},
					{
						"name": "card_name",
						"type": "nvarchar"
					},
					{
						"name": "bank_country",
						"type": "nvarchar"
					},
					{
						"name": "account_number",
						"type": "nvarchar"
					},
					{
						"name": "sort_code",
						"type": "nvarchar"
					},
					{
						"name": "swift_code",
						"type": "nvarchar"
					},
					{
						"name": "iban_number",
						"type": "nvarchar"
					},
					{
						"name": "circumstances",
						"type": "nvarchar"
					},
					{
						"name": "student_loans",
						"type": "nvarchar"
					},
					{
						"name": "access_to_car",
						"type": "nvarchar"
					},
					{
						"name": "why_servelegal",
						"type": "nvarchar"
					},
					{
						"name": "about_yourself",
						"type": "nvarchar"
					},
					{
						"name": "travel_outside",
						"type": "nvarchar"
					},
					{
						"name": "auditor_status",
						"type": "nvarchar"
					},
					{
						"name": "user_id",
						"type": "varchar"
					},
					{
						"name": "created_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "modified_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "entity_source",
						"type": "nvarchar"
					},
					{
						"name": "insert_date",
						"type": "datetimeoffset",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "staging_Auditors"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLDataWarehousePRODAuth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/staging_Audits')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLDataWarehousePRODAuth",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "row_id",
						"type": "varchar"
					},
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "internal_id",
						"type": "varchar"
					},
					{
						"name": "query_notes",
						"type": "nvarchar"
					},
					{
						"name": "query_category",
						"type": "nvarchar"
					},
					{
						"name": "survey_result",
						"type": "nvarchar"
					},
					{
						"name": "visit_info",
						"type": "nvarchar"
					},
					{
						"name": "submitted_date",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "approval_date",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "deadline_date",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "date_of_visit",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "purchase_cost",
						"type": "float",
						"precision": 15
					},
					{
						"name": "allowance",
						"type": "float",
						"precision": 15
					},
					{
						"name": "mileage",
						"type": "float",
						"precision": 15
					},
					{
						"name": "entrance_charge",
						"type": "float",
						"precision": 15
					},
					{
						"name": "travel_expenses",
						"type": "float",
						"precision": 15
					},
					{
						"name": "travel_expenses_type",
						"type": "nvarchar"
					},
					{
						"name": "travel_expenses_description",
						"type": "nvarchar"
					},
					{
						"name": "reclaimable_expenses",
						"type": "float",
						"precision": 15
					},
					{
						"name": "reclaimable_expenses_type",
						"type": "nvarchar"
					},
					{
						"name": "reclaimable_expenses_description",
						"type": "nvarchar"
					},
					{
						"name": "paid",
						"type": "bit"
					},
					{
						"name": "batched",
						"type": "bit"
					},
					{
						"name": "payroll_date",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "pay_date",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "email_note",
						"type": "nvarchar"
					},
					{
						"name": "status",
						"type": "nvarchar"
					},
					{
						"name": "order_id",
						"type": "varchar"
					},
					{
						"name": "site_id",
						"type": "varchar"
					},
					{
						"name": "approved_by_id",
						"type": "varchar"
					},
					{
						"name": "auditor_id",
						"type": "varchar"
					},
					{
						"name": "item_to_order",
						"type": "nvarchar"
					},
					{
						"name": "auditor_instructions",
						"type": "nvarchar"
					},
					{
						"name": "auditor_pay_per_audit",
						"type": "float",
						"precision": 15
					},
					{
						"name": "approving_notes",
						"type": "nvarchar"
					},
					{
						"name": "created_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "modified_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "entity_source",
						"type": "nvarchar"
					},
					{
						"name": "insert_date",
						"type": "datetimeoffset",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "staging_Audits"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLDataWarehousePRODAuth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/staging_Clients')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLDataWarehousePRODAuth",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "row_id",
						"type": "varchar"
					},
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "internal_id",
						"type": "varchar"
					},
					{
						"name": "legacy_id",
						"type": "varchar"
					},
					{
						"name": "name",
						"type": "nvarchar"
					},
					{
						"name": "logo",
						"type": "nvarchar"
					},
					{
						"name": "footer",
						"type": "nvarchar"
					},
					{
						"name": "client_type",
						"type": "nvarchar"
					},
					{
						"name": "sage_reference",
						"type": "nvarchar"
					},
					{
						"name": "manager_id",
						"type": "varchar"
					},
					{
						"name": "contract_expiry",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "store_locator",
						"type": "nvarchar"
					},
					{
						"name": "status",
						"type": "nvarchar"
					},
					{
						"name": "created_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "modified_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "org_level1_name",
						"type": "nvarchar"
					},
					{
						"name": "org_level2_name",
						"type": "nvarchar"
					},
					{
						"name": "org_level3_name",
						"type": "nvarchar"
					},
					{
						"name": "org_level4_name",
						"type": "nvarchar"
					},
					{
						"name": "entity_source",
						"type": "nvarchar"
					},
					{
						"name": "insert_date",
						"type": "datetimeoffset",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "staging_Clients"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLDataWarehousePRODAuth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/staging_Orders')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLDataWarehousePRODAuth",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "row_id",
						"type": "varchar"
					},
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "internal_id",
						"type": "varchar"
					},
					{
						"name": "schedule_type",
						"type": "nvarchar"
					},
					{
						"name": "item_to_order",
						"type": "nvarchar"
					},
					{
						"name": "order_info",
						"type": "nvarchar"
					},
					{
						"name": "visits_to_be_billed",
						"type": "int",
						"precision": 10
					},
					{
						"name": "start_date",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "end_date",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "auditor_pay_per_audit",
						"type": "nvarchar"
					},
					{
						"name": "client_charge_per_audit",
						"type": "nvarchar"
					},
					{
						"name": "auditor_instructions",
						"type": "nvarchar"
					},
					{
						"name": "email_subject",
						"type": "nvarchar"
					},
					{
						"name": "email_survey_result",
						"type": "nvarchar"
					},
					{
						"name": "exclude_from_client_reporting",
						"type": "bit"
					},
					{
						"name": "narv_visits_only",
						"type": "bit"
					},
					{
						"name": "status",
						"type": "nvarchar"
					},
					{
						"name": "currency",
						"type": "nvarchar"
					},
					{
						"name": "client_id",
						"type": "varchar"
					},
					{
						"name": "revision_id",
						"type": "varchar"
					},
					{
						"name": "created_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "modified_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "entity_source",
						"type": "nvarchar"
					},
					{
						"name": "insert_date",
						"type": "datetimeoffset",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "staging_Orders"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLDataWarehousePRODAuth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/staging_QuestionTemplates')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLDataWarehousePRODAuth",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "row_id",
						"type": "varchar"
					},
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "internal_id",
						"type": "varchar"
					},
					{
						"name": "help",
						"type": "nvarchar"
					},
					{
						"name": "title",
						"type": "nvarchar"
					},
					{
						"name": "required",
						"type": "bit"
					},
					{
						"name": "type",
						"type": "nvarchar"
					},
					{
						"name": "config",
						"type": "nvarchar"
					},
					{
						"name": "category",
						"type": "nvarchar"
					},
					{
						"name": "created_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "modified_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "entity_source",
						"type": "nvarchar"
					},
					{
						"name": "insert_date",
						"type": "datetimeoffset",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "staging_QuestionTemplates"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLDataWarehousePRODAuth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/staging_Questions')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLDataWarehousePRODAuth",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "row_id",
						"type": "varchar"
					},
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "internal_id",
						"type": "varchar"
					},
					{
						"name": "help",
						"type": "nvarchar"
					},
					{
						"name": "type",
						"type": "nvarchar"
					},
					{
						"name": "title",
						"type": "nvarchar"
					},
					{
						"name": "required",
						"type": "bit"
					},
					{
						"name": "category",
						"type": "nvarchar"
					},
					{
						"name": "config",
						"type": "nvarchar"
					},
					{
						"name": "question_template_id",
						"type": "varchar"
					},
					{
						"name": "revision_id",
						"type": "varchar"
					},
					{
						"name": "created_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "modified_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "entity_source",
						"type": "nvarchar"
					},
					{
						"name": "insert_date",
						"type": "datetimeoffset",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "staging_Questions"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLDataWarehousePRODAuth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/staging_Revisions')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLDataWarehousePRODAuth",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "row_id",
						"type": "varchar"
					},
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "internal_id",
						"type": "varchar"
					},
					{
						"name": "status",
						"type": "nvarchar"
					},
					{
						"name": "name",
						"type": "nvarchar"
					},
					{
						"name": "survey_id",
						"type": "varchar"
					},
					{
						"name": "blocked",
						"type": "bit"
					},
					{
						"name": "created_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "modified_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "entity_source",
						"type": "nvarchar"
					},
					{
						"name": "insert_date",
						"type": "datetimeoffset",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "staging_Revisions"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLDataWarehousePRODAuth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/staging_Sites')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLDataWarehousePRODAuth",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "row_id",
						"type": "varchar"
					},
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "internal_id",
						"type": "varchar"
					},
					{
						"name": "legacy_id",
						"type": "varchar"
					},
					{
						"name": "name",
						"type": "nvarchar"
					},
					{
						"name": "address_1",
						"type": "nvarchar"
					},
					{
						"name": "address_2",
						"type": "nvarchar"
					},
					{
						"name": "address_3",
						"type": "nvarchar"
					},
					{
						"name": "city",
						"type": "nvarchar"
					},
					{
						"name": "post_code",
						"type": "nvarchar"
					},
					{
						"name": "county",
						"type": "nvarchar"
					},
					{
						"name": "country",
						"type": "nvarchar"
					},
					{
						"name": "directions",
						"type": "nvarchar"
					},
					{
						"name": "approving_notes",
						"type": "nvarchar"
					},
					{
						"name": "code",
						"type": "nvarchar"
					},
					{
						"name": "status",
						"type": "nvarchar"
					},
					{
						"name": "client_id",
						"type": "varchar"
					},
					{
						"name": "created_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "modified_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "org_level1",
						"type": "nvarchar"
					},
					{
						"name": "org_level2",
						"type": "nvarchar"
					},
					{
						"name": "org_level3",
						"type": "nvarchar"
					},
					{
						"name": "org_level4",
						"type": "nvarchar"
					},
					{
						"name": "entity_source",
						"type": "nvarchar"
					},
					{
						"name": "insert_date",
						"type": "datetimeoffset",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "staging_Sites"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLDataWarehousePRODAuth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/staging_Surveys')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLDataWarehousePRODAuth",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "row_id",
						"type": "varchar"
					},
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "internal_id",
						"type": "varchar"
					},
					{
						"name": "title",
						"type": "nvarchar"
					},
					{
						"name": "created_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "modified_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "entity_source",
						"type": "nvarchar"
					},
					{
						"name": "insert_date",
						"type": "datetimeoffset",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "staging_Surveys"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLDataWarehousePRODAuth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/staging_Users')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLDataWarehousePRODAuth",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "row_id",
						"type": "varchar"
					},
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "internal_id",
						"type": "varchar"
					},
					{
						"name": "first_name",
						"type": "nvarchar"
					},
					{
						"name": "middle_name",
						"type": "nvarchar"
					},
					{
						"name": "last_name",
						"type": "nvarchar"
					},
					{
						"name": "email",
						"type": "nvarchar"
					},
					{
						"name": "image",
						"type": "nvarchar"
					},
					{
						"name": "status",
						"type": "nvarchar"
					},
					{
						"name": "notify_user",
						"type": "bit"
					},
					{
						"name": "role",
						"type": "nvarchar"
					},
					{
						"name": "last_access",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "client_id",
						"type": "nvarchar"
					},
					{
						"name": "created_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "modified_at",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "entity_source",
						"type": "nvarchar"
					},
					{
						"name": "insert_date",
						"type": "datetimeoffset",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "staging_Users"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLDataWarehousePRODAuth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AWS AVS prod replica set')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "PostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('AWS AVS prod replica set_connectionString')]"
				},
				"connectVia": {
					"referenceName": "ttl10-pipeline",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ttl10-pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AWS AVS replica set')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "PostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('AWS AVS replica set_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "ttl10-pipeline",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ttl10-pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeAnalytics1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDataLakeAnalytics",
				"typeProperties": {
					"accountName": "[parameters('AzureDataLakeAnalytics1_properties_typeProperties_accountName')]",
					"servicePrincipalId": "[parameters('AzureDataLakeAnalytics1_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeAnalytics1_servicePrincipalKey')]"
					},
					"tenant": "[parameters('AzureDataLakeAnalytics1_properties_typeProperties_tenant')]",
					"subscriptionId": "[parameters('AzureDataLakeAnalytics1_properties_typeProperties_subscriptionId')]",
					"resourceGroupName": "[parameters('AzureDataLakeAnalytics1_properties_typeProperties_resourceGroupName')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStore1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDataLakeStore",
				"typeProperties": {
					"dataLakeStoreUri": "[parameters('AzureDataLakeStore1_properties_typeProperties_dataLakeStoreUri')]",
					"tenant": "[parameters('AzureDataLakeStore1_properties_typeProperties_tenant')]",
					"subscriptionId": "[parameters('AzureDataLakeStore1_properties_typeProperties_subscriptionId')]",
					"resourceGroupName": "[parameters('AzureDataLakeStore1_properties_typeProperties_resourceGroupName')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStore1Auth')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDataLakeStore",
				"typeProperties": {
					"dataLakeStoreUri": "[parameters('AzureDataLakeStore1Auth_properties_typeProperties_dataLakeStoreUri')]",
					"azureCloudType": "AzurePublic",
					"servicePrincipalId": "[parameters('AzureDataLakeStore1Auth_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStore1Auth_servicePrincipalKey')]"
					},
					"tenant": "[parameters('AzureDataLakeStore1Auth_properties_typeProperties_tenant')]",
					"subscriptionId": "[parameters('AzureDataLakeStore1Auth_properties_typeProperties_subscriptionId')]",
					"resourceGroupName": "[parameters('AzureDataLakeStore1Auth_properties_typeProperties_resourceGroupName')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLDataWarehouseDev')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('SQLDataWarehouseDev_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLDataWarehouseDevAuth')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('SQLDataWarehouseDevAuth_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLDataWarehousePRODAuth')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('SQLDataWarehousePRODAuth_connectionString')]"
				},
				"connectVia": {
					"referenceName": "ttl10-pipeline",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ttl10-pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/serve_legal_reports_key_vault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('serve_legal_reports_key_vault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/every 12 hour run')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "AVS to Staging",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 12,
						"startTime": "2020-12-02T21:00:00",
						"timeZone": "GMT Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/AVS to Staging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomIntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 30
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ZeroTTLIntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "West Europe",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ttl10-pipeline')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CalculateAverages')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Audits",
								"type": "DatasetReference"
							},
							"name": "Audits"
						},
						{
							"dataset": {
								"referenceName": "Clients",
								"type": "DatasetReference"
							},
							"name": "Clients"
						},
						{
							"dataset": {
								"referenceName": "Sites",
								"type": "DatasetReference"
							},
							"name": "Sites"
						},
						{
							"dataset": {
								"referenceName": "DimYesNo",
								"type": "DatasetReference"
							},
							"name": "DimYesNo"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VariableTable",
								"type": "DatasetReference"
							},
							"name": "TDailyByClientType"
						},
						{
							"dataset": {
								"referenceName": "VariableTable",
								"type": "DatasetReference"
							},
							"name": "TClientTypes"
						},
						{
							"dataset": {
								"referenceName": "VariableTable",
								"type": "DatasetReference"
							},
							"name": "TProducts"
						},
						{
							"dataset": {
								"referenceName": "VariableTable",
								"type": "DatasetReference"
							},
							"name": "TDailyByProdyct"
						},
						{
							"dataset": {
								"referenceName": "VariableTable",
								"type": "DatasetReference"
							},
							"name": "TAverageByProduct"
						},
						{
							"dataset": {
								"referenceName": "VariableTable",
								"type": "DatasetReference"
							},
							"name": "TDailyByClientTypeProduct"
						},
						{
							"dataset": {
								"referenceName": "VariableTable",
								"type": "DatasetReference"
							},
							"name": "TMonthlyByClientTypeProduct"
						},
						{
							"dataset": {
								"referenceName": "VariableTable",
								"type": "DatasetReference"
							},
							"name": "TWeeklyByClientTypeProduct"
						},
						{
							"dataset": {
								"referenceName": "VariableTable",
								"type": "DatasetReference"
							},
							"name": "TWeeklyByClient"
						}
					],
					"transformations": [
						{
							"name": "SiteClientId"
						},
						{
							"name": "ClientType"
						},
						{
							"name": "JoinSite"
						},
						{
							"name": "JoinClient"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "SurveyResult"
						},
						{
							"name": "PickImportantColumns"
						},
						{
							"name": "TrueFalseResultCount"
						},
						{
							"name": "OnlyActiveStatus"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "Aggregate3"
						},
						{
							"name": "Aggregate4"
						},
						{
							"name": "CalculateFields"
						},
						{
							"name": "DayByClientTypeProduct"
						},
						{
							"name": "AverageByProduct"
						},
						{
							"name": "Aggregate6"
						},
						{
							"name": "Aggregate7"
						},
						{
							"name": "Aggregate8"
						}
					],
					"script": "source(output(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tquery_notes as string,\n\t\tquery_category as string,\n\t\tsurvey_result as string,\n\t\tvisit_info as string,\n\t\tsubmitted_date as string,\n\t\tapproval_date as string,\n\t\tdeadline_date as string,\n\t\tdate_of_visit as string,\n\t\tpurchase_cost as double,\n\t\tallowance as double,\n\t\tmileage as double,\n\t\tentrance_charge as double,\n\t\ttravel_expenses as double,\n\t\ttravel_expenses_type as string,\n\t\ttravel_expenses_description as string,\n\t\treclaimable_expenses as double,\n\t\treclaimable_expenses_type as string,\n\t\treclaimable_expenses_description as string,\n\t\tpaid as boolean,\n\t\tbatched as boolean,\n\t\tpayroll_date as string,\n\t\tpay_date as string,\n\t\temail_note as string,\n\t\tstatus as string,\n\t\torder_id as string,\n\t\tsite_id as string,\n\t\tapproved_by_id as string,\n\t\tauditor_id as string,\n\t\titem_to_order as string,\n\t\tauditor_instructions as string,\n\t\tauditor_pay_per_audit as double,\n\t\tapproving_notes as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Audits\nsource(output(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tlegacy_id as string,\n\t\tname as string,\n\t\tlogo as string,\n\t\tfooter as string,\n\t\tclient_type as string,\n\t\tsage_reference as string,\n\t\tmanager_id as string,\n\t\tcontract_expiry as string,\n\t\tstore_locator as string,\n\t\tstatus as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\torg_level1_name as string,\n\t\torg_level2_name as string,\n\t\torg_level3_name as string,\n\t\torg_level4_name as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Clients\nsource(output(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tlegacy_id as string,\n\t\tname as string,\n\t\taddress_1 as string,\n\t\taddress_2 as string,\n\t\taddress_3 as string,\n\t\tcity as string,\n\t\tpost_code as string,\n\t\tcounty as string,\n\t\tcountry as string,\n\t\tdirections as string,\n\t\tapproving_notes as string,\n\t\tcode as string,\n\t\tstatus as string,\n\t\tclient_id as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\torg_level1 as string,\n\t\torg_level2 as string,\n\t\torg_level3 as string,\n\t\torg_level4 as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Sites\nsource(output(\n\t\tid as integer,\n\t\tbitValue as boolean,\n\t\tstringValue as string,\n\t\tvalueType as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimYesNo\nSites select(mapColumn(\n\t\tsite_id = id,\n\t\tsite_client_id = client_id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SiteClientId\nClients select(mapColumn(\n\t\tid,\n\t\tclient_type\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ClientType\nSurveyResult, SiteClientId join(PickImportantColumns@site_id == SiteClientId@site_id,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinSite\nJoinSite, ClientType join(site_client_id == ClientType@id,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinClient\nJoinClient aggregate(groupBy(date_of_visit,\n\t\tclient_type),\n\ttrue_result_count = sum(true_result_count),\n\t\tfalse_result_count = sum(false_result_count),\n\t\ttotal_count = count(),\n\t\ttrue_percentage = sum(true_result_count) / count(),\n\t\tfalse_percentage = sum(false_result_count) / count()) ~> Aggregate1\nCalculateFields, TrueFalseResultCount join(lower(survey_result) == lower(stringValue),\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> SurveyResult\nOnlyActiveStatus select(mapColumn(\n\t\tid,\n\t\tquery_category,\n\t\tsurvey_result,\n\t\tdate_of_visit,\n\t\tstatus,\n\t\tsite_id,\n\t\titem_to_order\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PickImportantColumns\nDimYesNo derive(bitValue = bitValue,\n\t\tstringValue = stringValue,\n\t\ttrue_result_count = iif(bitValue, 1, 0),\n\t\tfalse_result_count = iif(bitValue, 0, 1)) ~> TrueFalseResultCount\nAudits filter(status == 'approved') ~> OnlyActiveStatus\nJoinClient aggregate(groupBy(client_type),\n\tcount = count(),\n\t\ttrue_percent = sum(true_result_count) / count()) ~> Aggregate2\nSurveyResult aggregate(groupBy(item_to_order),\n\tcount = count(),\n\t\ttrue_percent = sum(true_result_count) / count()) ~> Aggregate3\nSurveyResult aggregate(groupBy(item_to_order,\n\t\tdate_of_visit),\n\tcount = count(),\n\t\ttrue_percent = sum(true_result_count) / count(),\n\t\tfalse_percent = sum(false_result_count) / count()) ~> Aggregate4\nPickImportantColumns derive(date_of_visit = toDate(regexExtract(date_of_visit,'....-..-..',0),'yyyy-MM-dd'),\n\t\tmonth_of_visit = toDate(regexExtract(date_of_visit,'....-..',0),'yyyy-MM'),\n\t\tweek_of_visit = concat(toString(year(toDate(date_of_visit))), lpad(toString(weekOfYear(toDate(date_of_visit))), 2, '0')),\n\t\tyear = year(toDate(date_of_visit)),\n\t\tmonth = month(toDate(date_of_visit)),\n\t\tweek = weekOfYear(toDate(date_of_visit)),\n\t\titem_to_order = lower(coalesce(item_to_order, 'not specified'))) ~> CalculateFields\nJoinClient aggregate(groupBy(client_type,\n\t\titem_to_order,\n\t\tdate_of_visit),\n\tcount = count(),\n\t\ttrue_percent = sum(true_result_count) / count(),\n\t\tfalse_percent = sum(false_result_count) / count()) ~> DayByClientTypeProduct\nSurveyResult aggregate(groupBy(item_to_order),\n\tcount = count()) ~> AverageByProduct\nJoinClient aggregate(groupBy(month_of_visit,\n\t\titem_to_order,\n\t\tclient_type),\n\tcount = count(),\n\t\ttrue_percent = sum(true_result_count) / count(),\n\t\tfalse_percent = sum(false_result_count) / count()) ~> Aggregate6\nJoinClient aggregate(groupBy(client_type,\n\t\tweek_of_visit,\n\t\titem_to_order),\n\tcount = count(),\n\t\ttrue_percent = sum(true_result_count) / count()) ~> Aggregate7\nJoinClient aggregate(groupBy(client_type,\n\t\tweek_of_visit),\n\tcount = count(),\n\t\ttrue_percent = sum(true_result_count) / count()) ~> Aggregate8\nAggregate1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> TDailyByClientType\nAggregate2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tmapColumn(\n\t\tclient_type,\n\t\tcount,\n\t\ttrue_percent\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> TClientTypes\nAggregate3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tmapColumn(\n\t\titem_to_order,\n\t\tcount,\n\t\ttrue_percent\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> TProducts\nAggregate4 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tmapColumn(\n\t\titem_to_order,\n\t\tdate_of_visit,\n\t\tcount,\n\t\ttrue_percent,\n\t\tfalse_percent\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> TDailyByProdyct\nAverageByProduct sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> TAverageByProduct\nDayByClientTypeProduct sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tmapColumn(\n\t\tclient_type,\n\t\titem_to_order,\n\t\tdate_of_visit,\n\t\tcount,\n\t\ttrue_percent,\n\t\tfalse_percent\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> TDailyByClientTypeProduct\nAggregate6 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> TMonthlyByClientTypeProduct\nAggregate7 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tmapColumn(\n\t\tclient_type,\n\t\titem_to_order,\n\t\tweek_of_visit,\n\t\tcount,\n\t\ttrue_percent\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> TWeeklyByClientTypeProduct\nAggregate8 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tmapColumn(\n\t\tclient_type,\n\t\tweek_of_visit,\n\t\tcount,\n\t\ttrue_percent\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> TWeeklyByClient"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Audits')]",
				"[concat(variables('factoryId'), '/datasets/Clients')]",
				"[concat(variables('factoryId'), '/datasets/Sites')]",
				"[concat(variables('factoryId'), '/datasets/DimYesNo')]",
				"[concat(variables('factoryId'), '/datasets/VariableTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ConvertExcelToTables')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Excel1",
								"type": "DatasetReference"
							},
							"name": "Excel"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ErrorOutput",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "VariableTable",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						}
					],
					"script": "parameters{\n\tclient_to_export as string ('CLIENT5')\n}\nsource(output(\n\t\tOrder as string,\n\t\tClient as string,\n\t\tVisit as string,\n\t\tSite as string,\n\t\t{Premises Name} as string,\n\t\tAddress1 as string,\n\t\tAddress2 as string,\n\t\tAddress3 as string,\n\t\tCity as string,\n\t\t{Post Code} as string,\n\t\t{Item to order} as string,\n\t\t{Actual Visit Date} as string,\n\t\t{Actual Visit Time} as string,\n\t\t{AM / PM} as string,\n\t\t{Pass-Fail} as string,\n\t\t{Pass-Fail2} as string,\n\t\t{Abort Reason} as string,\n\t\t{Extra Site 1} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> Excel\nExcel filter(Client == $client_to_export) ~> Filter1\nExcel sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tmapColumn(\n\t\tVisit\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1\nFilter1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Excel1')]",
				"[concat(variables('factoryId'), '/datasets/ErrorOutput')]",
				"[concat(variables('factoryId'), '/datasets/VariableTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HistoricalDataImport')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzureBlobStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "InputExcel"
						},
						{
							"dataset": {
								"referenceName": "Clients",
								"type": "DatasetReference"
							},
							"name": "ExistingClients"
						},
						{
							"dataset": {
								"referenceName": "Sites",
								"type": "DatasetReference"
							},
							"name": "ExistingSites"
						},
						{
							"dataset": {
								"referenceName": "Orders",
								"type": "DatasetReference"
							},
							"name": "ExistingOrders"
						},
						{
							"dataset": {
								"referenceName": "Audits",
								"type": "DatasetReference"
							},
							"name": "ExistingAudits"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Clients",
								"type": "DatasetReference"
							},
							"name": "MergedClients"
						},
						{
							"dataset": {
								"referenceName": "Sites",
								"type": "DatasetReference"
							},
							"name": "MergedSites"
						},
						{
							"dataset": {
								"referenceName": "Orders",
								"type": "DatasetReference"
							},
							"name": "MergedOrders"
						},
						{
							"dataset": {
								"referenceName": "Audits",
								"type": "DatasetReference"
							},
							"name": "MergedAudits"
						}
					],
					"transformations": [
						{
							"name": "ExistingCliendIds"
						},
						{
							"name": "UniqueClients"
						},
						{
							"name": "ClientsLookedUp"
						},
						{
							"name": "ComputedColumns"
						},
						{
							"name": "ExcludeEmpty"
						},
						{
							"name": "ExcludeAVSOwned"
						},
						{
							"name": "EstablishMerge"
						},
						{
							"name": "UniqueSites"
						},
						{
							"name": "ExistingSiteIds"
						},
						{
							"name": "SiteLookedUp"
						},
						{
							"name": "ComputedSiteColumns"
						},
						{
							"name": "ClientLookedUp"
						},
						{
							"name": "ExcludeAVSOwnedSites"
						},
						{
							"name": "EstablishSiteMerge"
						},
						{
							"name": "UniqueOrders"
						},
						{
							"name": "OrderClientsLookup"
						},
						{
							"name": "ComputedOrderColumns"
						},
						{
							"name": "EstablishOrderMerge"
						},
						{
							"name": "ExistingOrderIds"
						},
						{
							"name": "ExistingOrdersLoookup"
						},
						{
							"name": "ExistingAuditIds"
						},
						{
							"name": "AuditsLookup"
						},
						{
							"name": "ComputedAuditColumns"
						},
						{
							"name": "AuditSiteLookup"
						},
						{
							"name": "AuditOrderLookup"
						},
						{
							"name": "EstablishAuditMerge"
						}
					],
					"script": "source(output(\n\t\tOrder as string,\n\t\tClient as string,\n\t\tVisit as string,\n\t\tSite as string,\n\t\t{Premises Name} as string,\n\t\tAddress1 as string,\n\t\tAddress2 as string,\n\t\tAddress3 as string,\n\t\tCity as string,\n\t\t{Post Code} as string,\n\t\t{Item to order} as string,\n\t\t{Actual Visit Date} as date 'dd/MM/yyyy',\n\t\t{Actual Visit Time} as timestamp 'yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'',\n\t\t{AM / PM} as string,\n\t\t{Pass-Fail} as string,\n\t\t{Pass-Fail2} as string,\n\t\t{Abort Reason} as string,\n\t\t{Extra Site 1} as short\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'excel',\n\tcontainer: 'audits',\n\tfileName: '3 year data v3.xlsx',\n\tsheetName: '3 year data v1',\n\tfirstRowAsHeader: true) ~> InputExcel\nsource(output(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tlegacy_id as string,\n\t\tname as string,\n\t\tlogo as string,\n\t\tfooter as string,\n\t\tclient_type as string,\n\t\tsage_reference as string,\n\t\tmanager_id as string,\n\t\tcontract_expiry as string,\n\t\tstore_locator as string,\n\t\tstatus as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\torg_level1_name as string,\n\t\torg_level2_name as string,\n\t\torg_level3_name as string,\n\t\torg_level4_name as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ExistingClients\nsource(output(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tlegacy_id as string,\n\t\tname as string,\n\t\taddress_1 as string,\n\t\taddress_2 as string,\n\t\taddress_3 as string,\n\t\tcity as string,\n\t\tpost_code as string,\n\t\tcounty as string,\n\t\tcountry as string,\n\t\tdirections as string,\n\t\tapproving_notes as string,\n\t\tcode as string,\n\t\tstatus as string,\n\t\tclient_id as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\torg_level1 as string,\n\t\torg_level2 as string,\n\t\torg_level3 as string,\n\t\torg_level4 as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ExistingSites\nsource(output(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tschedule_type as string,\n\t\titem_to_order as string,\n\t\torder_info as string,\n\t\tvisits_to_be_billed as integer,\n\t\tstart_date as string,\n\t\tend_date as string,\n\t\tauditor_pay_per_audit as string,\n\t\tclient_charge_per_audit as string,\n\t\tauditor_instructions as string,\n\t\temail_subject as string,\n\t\temail_survey_result as string,\n\t\texclude_from_client_reporting as boolean,\n\t\tnarv_visits_only as boolean,\n\t\tstatus as string,\n\t\tcurrency as string,\n\t\tclient_id as string,\n\t\trevision_id as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ExistingOrders\nsource(output(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tquery_notes as string,\n\t\tquery_category as string,\n\t\tsurvey_result as string,\n\t\tvisit_info as string,\n\t\tsubmitted_date as string,\n\t\tapproval_date as string,\n\t\tdeadline_date as string,\n\t\tdate_of_visit as string,\n\t\tpurchase_cost as double,\n\t\tallowance as double,\n\t\tmileage as double,\n\t\tentrance_charge as double,\n\t\ttravel_expenses as double,\n\t\ttravel_expenses_type as string,\n\t\ttravel_expenses_description as string,\n\t\treclaimable_expenses as double,\n\t\treclaimable_expenses_type as string,\n\t\treclaimable_expenses_description as string,\n\t\tpaid as boolean,\n\t\tbatched as boolean,\n\t\tpayroll_date as string,\n\t\tpay_date as string,\n\t\temail_note as string,\n\t\tstatus as string,\n\t\torder_id as string,\n\t\tsite_id as string,\n\t\tapproved_by_id as string,\n\t\tauditor_id as string,\n\t\titem_to_order as string,\n\t\tauditor_instructions as string,\n\t\tauditor_pay_per_audit as double,\n\t\tapproving_notes as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ExistingAudits\nExistingClients select(mapColumn(\n\t\texisting_client_id = id,\n\t\texisting_client_legacy_id = legacy_id,\n\t\texisting_client_entity_source = entity_source\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ExistingCliendIds\nExcludeEmpty aggregate(groupBy(Client),\n\tname = max(Client)) ~> UniqueClients\nUniqueClients, ExistingCliendIds lookup(Client == existing_client_legacy_id,\n\tmultiple: false,\n\tpickup: 'first',\n\tasc(existing_client_id, true),\n\tbroadcast: 'auto')~> ClientsLookedUp\nClientsLookedUp derive(id = coalesce(existing_client_id, Client),\n\t\tstatus = 'active',\n\t\tlegacy_id = coalesce(existing_client_legacy_id, Client),\n\t\tentity_source = 'historical-import') ~> ComputedColumns\nInputExcel filter(!isNull(Client)) ~> ExcludeEmpty\nComputedColumns filter(isNull(existing_client_entity_source) || existing_client_entity_source != 'AVS') ~> ExcludeAVSOwned\nExcludeAVSOwned alterRow(insertIf(isNull(existing_client_id)),\n\tupdateIf(!isNull(existing_client_id))) ~> EstablishMerge\nExcludeEmpty aggregate(groupBy(Site),\n\tClient = max(Client),\n\t\t{Premises Name} = max({Premises Name}),\n\t\tAddress1 = max(Address1),\n\t\tAddress2 = max(Address2),\n\t\tAddress3 = max(Address3),\n\t\tCity = max(City),\n\t\t{Post Code} = max({Post Code})) ~> UniqueSites\nExistingSites select(mapColumn(\n\t\texisting_site_id = id,\n\t\texisting_site_legacy_id = legacy_id,\n\t\texisting_site_entity_source = entity_source\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ExistingSiteIds\nUniqueSites, ExistingSiteIds lookup(Site == existing_site_legacy_id,\n\tmultiple: false,\n\tpickup: 'first',\n\tasc(existing_site_id, true),\n\tbroadcast: 'auto')~> SiteLookedUp\nClientLookedUp derive(id = coalesce(existing_site_id, Site),\n\t\tlegacy_id = Site,\n\t\tclient_id = coalesce(existing_client_legacy_id, Client),\n\t\tstatus = 'active',\n\t\tentity_source = 'historic-import') ~> ComputedSiteColumns\nSiteLookedUp, ExistingCliendIds lookup(Client == existing_client_legacy_id,\n\tmultiple: false,\n\tpickup: 'first',\n\tasc(existing_client_id, true),\n\tbroadcast: 'auto')~> ClientLookedUp\nComputedSiteColumns filter(isNull(existing_site_id) || existing_site_entity_source != 'AVS') ~> ExcludeAVSOwnedSites\nExcludeAVSOwnedSites alterRow(insertIf(isNull(existing_site_id)),\n\tupdateIf(!isNull(existing_site_id))) ~> EstablishSiteMerge\nExcludeEmpty aggregate(groupBy(Order),\n\t{Item to order} = max({Item to order}),\n\t\tClient = max(Client)) ~> UniqueOrders\nUniqueOrders, ExistingCliendIds lookup(Client == existing_client_legacy_id,\n\tmultiple: false,\n\tpickup: 'first',\n\tasc(existing_client_id, true),\n\tbroadcast: 'auto')~> OrderClientsLookup\nOrderClientsLookup derive(client_id = coalesce(existing_client_id, Client),\n\t\tstatus = 'active',\n\t\texclude_from_client_reporting = false(),\n\t\tid = Order,\n\t\tlegacy_id = Order,\n\t\tentity_source = 'historic-import') ~> ComputedOrderColumns\nExistingOrdersLoookup alterRow(insertIf(isNull(existing_order_id)),\n\tupdateIf(true())) ~> EstablishOrderMerge\nExistingOrders select(mapColumn(\n\t\texisting_order_id = id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ExistingOrderIds\nComputedOrderColumns, ExistingOrderIds lookup(Order == existing_order_id,\n\tmultiple: false,\n\tpickup: 'first',\n\tasc(existing_order_id, true),\n\tbroadcast: 'auto')~> ExistingOrdersLoookup\nExistingAudits select(mapColumn(\n\t\texisting_audit_id = id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ExistingAuditIds\nExcludeEmpty, ExistingAuditIds lookup(Visit == existing_audit_id,\n\tmultiple: false,\n\tpickup: 'first',\n\tasc(existing_audit_id, true),\n\tbroadcast: 'auto')~> AuditsLookup\nAuditOrderLookup derive(id = Visit,\n\t\torder_id = coalesce(existing_order_id, Order),\n\t\tsite_id = coalesce(existing_site_id, Site),\n\t\tlegacy_id = Visit,\n\t\tdate_of_visit = concat(toString({Actual Visit Date}, 'yyyy-MM-dd'),' ', toString(hour({Actual Visit Time}), '00'), ':', toString(minute({Actual Visit Time}), '00'), ':', toString(second({Actual Visit Time}), '00'), {AM / PM}),\n\t\tstatus = 'approved') ~> ComputedAuditColumns\nAuditsLookup, ExistingSiteIds lookup(Site == existing_site_legacy_id,\n\tmultiple: false,\n\tpickup: 'first',\n\tasc(existing_site_id, true),\n\tbroadcast: 'auto')~> AuditSiteLookup\nAuditSiteLookup, ExistingOrderIds lookup(Order == existing_order_id,\n\tmultiple: false,\n\tpickup: 'first',\n\tasc(existing_order_id, true),\n\tbroadcast: 'auto')~> AuditOrderLookup\nComputedAuditColumns alterRow(insertIf(isNull(existing_audit_id)),\n\tupdateIf(true())) ~> EstablishAuditMerge\nEstablishMerge sink(input(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tlegacy_id as string,\n\t\tname as string,\n\t\tlogo as string,\n\t\tfooter as string,\n\t\tclient_type as string,\n\t\tsage_reference as string,\n\t\tmanager_id as string,\n\t\tcontract_expiry as string,\n\t\tstore_locator as string,\n\t\tstatus as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\torg_level1_name as string,\n\t\torg_level2_name as string,\n\t\torg_level3_name as string,\n\t\torg_level4_name as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['id'],\n\tformat: 'table',\n\tmapColumn(\n\t\tname,\n\t\tstatus,\n\t\tlegacy_id,\n\t\tstatus,\n\t\tentity_source,\n\t\tid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> MergedClients\nEstablishSiteMerge sink(input(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tlegacy_id as string,\n\t\tname as string,\n\t\taddress_1 as string,\n\t\taddress_2 as string,\n\t\taddress_3 as string,\n\t\tcity as string,\n\t\tpost_code as string,\n\t\tcounty as string,\n\t\tcountry as string,\n\t\tdirections as string,\n\t\tapproving_notes as string,\n\t\tcode as string,\n\t\tstatus as string,\n\t\tclient_id as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\torg_level1 as string,\n\t\torg_level2 as string,\n\t\torg_level3 as string,\n\t\torg_level4 as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['id'],\n\tformat: 'table',\n\tmapColumn(\n\t\tlegacy_id,\n\t\tname = {Premises Name},\n\t\taddress_1 = Address1,\n\t\taddress_2 = Address2,\n\t\taddress_3 = Address3,\n\t\tcity = City,\n\t\tpost_code = {Post Code},\n\t\tstatus,\n\t\tclient_id,\n\t\tentity_source,\n\t\tid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> MergedSites\nEstablishOrderMerge sink(input(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tschedule_type as string,\n\t\titem_to_order as string,\n\t\torder_info as string,\n\t\tvisits_to_be_billed as integer,\n\t\tstart_date as string,\n\t\tend_date as string,\n\t\tauditor_pay_per_audit as string,\n\t\tclient_charge_per_audit as string,\n\t\tauditor_instructions as string,\n\t\temail_subject as string,\n\t\temail_survey_result as string,\n\t\texclude_from_client_reporting as boolean,\n\t\tnarv_visits_only as boolean,\n\t\tstatus as string,\n\t\tcurrency as string,\n\t\tclient_id as string,\n\t\trevision_id as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['id'],\n\tformat: 'table',\n\tmapColumn(\n\t\tid,\n\t\titem_to_order = {Item to order},\n\t\texclude_from_client_reporting,\n\t\tstatus,\n\t\tclient_id,\n\t\tentity_source\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> MergedOrders\nEstablishAuditMerge sink(input(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tquery_notes as string,\n\t\tquery_category as string,\n\t\tsurvey_result as string,\n\t\tvisit_info as string,\n\t\tsubmitted_date as string,\n\t\tapproval_date as string,\n\t\tdeadline_date as string,\n\t\tdate_of_visit as string,\n\t\tpurchase_cost as double,\n\t\tallowance as double,\n\t\tmileage as double,\n\t\tentrance_charge as double,\n\t\ttravel_expenses as double,\n\t\ttravel_expenses_type as string,\n\t\ttravel_expenses_description as string,\n\t\treclaimable_expenses as double,\n\t\treclaimable_expenses_type as string,\n\t\treclaimable_expenses_description as string,\n\t\tpaid as boolean,\n\t\tbatched as boolean,\n\t\tpayroll_date as string,\n\t\tpay_date as string,\n\t\temail_note as string,\n\t\tstatus as string,\n\t\torder_id as string,\n\t\tsite_id as string,\n\t\tapproved_by_id as string,\n\t\tauditor_id as string,\n\t\titem_to_order as string,\n\t\tauditor_instructions as string,\n\t\tauditor_pay_per_audit as double,\n\t\tapproving_notes as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['id'],\n\tformat: 'table',\n\tmapColumn(\n\t\tid,\n\t\tdate_of_visit,\n\t\tstatus,\n\t\torder_id,\n\t\tsite_id,\n\t\titem_to_order = {Item to order},\n\t\tsurvey_result = {Pass-Fail}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> MergedAudits"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]",
				"[concat(variables('factoryId'), '/datasets/Clients')]",
				"[concat(variables('factoryId'), '/datasets/Sites')]",
				"[concat(variables('factoryId'), '/datasets/Orders')]",
				"[concat(variables('factoryId'), '/datasets/Audits')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HistoricalDataImport_AuditsOnly')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzureBlobStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "InputExcel"
						},
						{
							"dataset": {
								"referenceName": "Clients",
								"type": "DatasetReference"
							},
							"name": "ExistingClients"
						},
						{
							"dataset": {
								"referenceName": "Sites",
								"type": "DatasetReference"
							},
							"name": "ExistingSites"
						},
						{
							"dataset": {
								"referenceName": "Orders",
								"type": "DatasetReference"
							},
							"name": "ExistingOrders"
						},
						{
							"dataset": {
								"referenceName": "Audits",
								"type": "DatasetReference"
							},
							"name": "ExistingAudits"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Orders",
								"type": "DatasetReference"
							},
							"name": "MergedOrders"
						},
						{
							"dataset": {
								"referenceName": "Audits",
								"type": "DatasetReference"
							},
							"name": "MergedAudits"
						}
					],
					"transformations": [
						{
							"name": "ExistingCliendIds"
						},
						{
							"name": "ExcludeEmpty"
						},
						{
							"name": "ExistingSiteIds"
						},
						{
							"name": "UniqueOrders"
						},
						{
							"name": "OrderClientsLookup"
						},
						{
							"name": "ComputedOrderColumns"
						},
						{
							"name": "EstablishOrderMerge"
						},
						{
							"name": "ExistingOrderIds"
						},
						{
							"name": "ExistingOrdersLoookup"
						},
						{
							"name": "ExistingAuditIds"
						},
						{
							"name": "AuditsLookup"
						},
						{
							"name": "ComputedAuditColumns"
						},
						{
							"name": "AuditSiteLookup"
						},
						{
							"name": "AuditOrderLookup"
						},
						{
							"name": "EstablishAuditMerge"
						}
					],
					"script": "source(output(\n\t\tOrder as string,\n\t\tClient as string,\n\t\tVisit as string,\n\t\tSite as string,\n\t\t{Premises Name} as string,\n\t\tAddress1 as string,\n\t\tAddress2 as string,\n\t\tAddress3 as string,\n\t\tCity as string,\n\t\t{Post Code} as string,\n\t\t{Item to order} as string,\n\t\t{Actual Visit Date} as date 'dd/MM/yyyy',\n\t\t{Actual Visit Time} as timestamp 'yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'',\n\t\t{AM / PM} as string,\n\t\t{Pass-Fail} as string,\n\t\t{Pass-Fail2} as string,\n\t\t{Abort Reason} as string,\n\t\t{Extra Site 1} as short\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'excel',\n\tcontainer: 'audits',\n\tfileName: '3 year data v3.xlsx',\n\tsheetName: '3 year data v1',\n\tfirstRowAsHeader: true) ~> InputExcel\nsource(output(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tlegacy_id as string,\n\t\tname as string,\n\t\tlogo as string,\n\t\tfooter as string,\n\t\tclient_type as string,\n\t\tsage_reference as string,\n\t\tmanager_id as string,\n\t\tcontract_expiry as string,\n\t\tstore_locator as string,\n\t\tstatus as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\torg_level1_name as string,\n\t\torg_level2_name as string,\n\t\torg_level3_name as string,\n\t\torg_level4_name as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ExistingClients\nsource(output(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tlegacy_id as string,\n\t\tname as string,\n\t\taddress_1 as string,\n\t\taddress_2 as string,\n\t\taddress_3 as string,\n\t\tcity as string,\n\t\tpost_code as string,\n\t\tcounty as string,\n\t\tcountry as string,\n\t\tdirections as string,\n\t\tapproving_notes as string,\n\t\tcode as string,\n\t\tstatus as string,\n\t\tclient_id as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\torg_level1 as string,\n\t\torg_level2 as string,\n\t\torg_level3 as string,\n\t\torg_level4 as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ExistingSites\nsource(output(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tschedule_type as string,\n\t\titem_to_order as string,\n\t\torder_info as string,\n\t\tvisits_to_be_billed as integer,\n\t\tstart_date as string,\n\t\tend_date as string,\n\t\tauditor_pay_per_audit as string,\n\t\tclient_charge_per_audit as string,\n\t\tauditor_instructions as string,\n\t\temail_subject as string,\n\t\temail_survey_result as string,\n\t\texclude_from_client_reporting as boolean,\n\t\tnarv_visits_only as boolean,\n\t\tstatus as string,\n\t\tcurrency as string,\n\t\tclient_id as string,\n\t\trevision_id as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ExistingOrders\nsource(output(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tquery_notes as string,\n\t\tquery_category as string,\n\t\tsurvey_result as string,\n\t\tvisit_info as string,\n\t\tsubmitted_date as string,\n\t\tapproval_date as string,\n\t\tdeadline_date as string,\n\t\tdate_of_visit as string,\n\t\tpurchase_cost as double,\n\t\tallowance as double,\n\t\tmileage as double,\n\t\tentrance_charge as double,\n\t\ttravel_expenses as double,\n\t\ttravel_expenses_type as string,\n\t\ttravel_expenses_description as string,\n\t\treclaimable_expenses as double,\n\t\treclaimable_expenses_type as string,\n\t\treclaimable_expenses_description as string,\n\t\tpaid as boolean,\n\t\tbatched as boolean,\n\t\tpayroll_date as string,\n\t\tpay_date as string,\n\t\temail_note as string,\n\t\tstatus as string,\n\t\torder_id as string,\n\t\tsite_id as string,\n\t\tapproved_by_id as string,\n\t\tauditor_id as string,\n\t\titem_to_order as string,\n\t\tauditor_instructions as string,\n\t\tauditor_pay_per_audit as double,\n\t\tapproving_notes as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ExistingAudits\nExistingClients select(mapColumn(\n\t\texisting_client_id = id,\n\t\texisting_client_legacy_id = legacy_id,\n\t\texisting_client_entity_source = entity_source\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ExistingCliendIds\nInputExcel filter(!isNull(Client)) ~> ExcludeEmpty\nExistingSites select(mapColumn(\n\t\texisting_site_id = id,\n\t\texisting_site_legacy_id = legacy_id,\n\t\texisting_site_entity_source = entity_source\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ExistingSiteIds\nExcludeEmpty aggregate(groupBy(Order),\n\t{Item to order} = max({Item to order}),\n\t\tClient = max(Client)) ~> UniqueOrders\nUniqueOrders, ExistingCliendIds lookup(Client == existing_client_legacy_id,\n\tmultiple: false,\n\tpickup: 'first',\n\tasc(existing_client_id, true),\n\tbroadcast: 'auto')~> OrderClientsLookup\nOrderClientsLookup derive(client_id = coalesce(existing_client_id, Client),\n\t\tstatus = 'active',\n\t\texclude_from_client_reporting = false(),\n\t\tid = Order,\n\t\tlegacy_id = Order,\n\t\tentity_source = 'historic-import') ~> ComputedOrderColumns\nExistingOrdersLoookup alterRow(insertIf(isNull(existing_order_id)),\n\tupdateIf(true())) ~> EstablishOrderMerge\nExistingOrders select(mapColumn(\n\t\texisting_order_id = id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ExistingOrderIds\nComputedOrderColumns, ExistingOrderIds lookup(Order == existing_order_id,\n\tmultiple: false,\n\tpickup: 'first',\n\tasc(existing_order_id, true),\n\tbroadcast: 'auto')~> ExistingOrdersLoookup\nExistingAudits select(mapColumn(\n\t\texisting_audit_id = id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ExistingAuditIds\nExcludeEmpty, ExistingAuditIds lookup(Visit == existing_audit_id,\n\tmultiple: false,\n\tpickup: 'first',\n\tasc(existing_audit_id, true),\n\tbroadcast: 'auto')~> AuditsLookup\nAuditOrderLookup derive(id = Visit,\n\t\torder_id = coalesce(existing_order_id, Order),\n\t\tsite_id = coalesce(existing_site_id, Site),\n\t\tlegacy_id = Visit,\n\t\tdate_of_visit = concat(toString({Actual Visit Date}, 'yyyy-MM-dd'),' ', toString(hour({Actual Visit Time}), '00'), ':', toString(minute({Actual Visit Time}), '00'), ':', toString(second({Actual Visit Time}), '00'), {AM / PM}),\n\t\tstatus = 'approved') ~> ComputedAuditColumns\nAuditsLookup, ExistingSiteIds lookup(Site == existing_site_legacy_id,\n\tmultiple: false,\n\tpickup: 'first',\n\tasc(existing_site_id, true),\n\tbroadcast: 'auto')~> AuditSiteLookup\nAuditSiteLookup, ExistingOrderIds lookup(Order == existing_order_id,\n\tmultiple: false,\n\tpickup: 'first',\n\tasc(existing_order_id, true),\n\tbroadcast: 'auto')~> AuditOrderLookup\nComputedAuditColumns alterRow(insertIf(isNull(existing_audit_id)),\n\tupdateIf(true())) ~> EstablishAuditMerge\nEstablishOrderMerge sink(input(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tschedule_type as string,\n\t\titem_to_order as string,\n\t\torder_info as string,\n\t\tvisits_to_be_billed as integer,\n\t\tstart_date as string,\n\t\tend_date as string,\n\t\tauditor_pay_per_audit as string,\n\t\tclient_charge_per_audit as string,\n\t\tauditor_instructions as string,\n\t\temail_subject as string,\n\t\temail_survey_result as string,\n\t\texclude_from_client_reporting as boolean,\n\t\tnarv_visits_only as boolean,\n\t\tstatus as string,\n\t\tcurrency as string,\n\t\tclient_id as string,\n\t\trevision_id as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['id'],\n\tformat: 'table',\n\tmapColumn(\n\t\tid,\n\t\titem_to_order = {Item to order},\n\t\texclude_from_client_reporting,\n\t\tstatus,\n\t\tclient_id,\n\t\tentity_source\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> MergedOrders\nEstablishAuditMerge sink(input(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tquery_notes as string,\n\t\tquery_category as string,\n\t\tsurvey_result as string,\n\t\tvisit_info as string,\n\t\tsubmitted_date as string,\n\t\tapproval_date as string,\n\t\tdeadline_date as string,\n\t\tdate_of_visit as string,\n\t\tpurchase_cost as double,\n\t\tallowance as double,\n\t\tmileage as double,\n\t\tentrance_charge as double,\n\t\ttravel_expenses as double,\n\t\ttravel_expenses_type as string,\n\t\ttravel_expenses_description as string,\n\t\treclaimable_expenses as double,\n\t\treclaimable_expenses_type as string,\n\t\treclaimable_expenses_description as string,\n\t\tpaid as boolean,\n\t\tbatched as boolean,\n\t\tpayroll_date as string,\n\t\tpay_date as string,\n\t\temail_note as string,\n\t\tstatus as string,\n\t\torder_id as string,\n\t\tsite_id as string,\n\t\tapproved_by_id as string,\n\t\tauditor_id as string,\n\t\titem_to_order as string,\n\t\tauditor_instructions as string,\n\t\tauditor_pay_per_audit as double,\n\t\tapproving_notes as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['id'],\n\tformat: 'table',\n\tmapColumn(\n\t\tid,\n\t\tdate_of_visit,\n\t\tstatus,\n\t\torder_id,\n\t\tsite_id,\n\t\titem_to_order = {Item to order},\n\t\tsurvey_result = {Pass-Fail}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> MergedAudits"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]",
				"[concat(variables('factoryId'), '/datasets/Clients')]",
				"[concat(variables('factoryId'), '/datasets/Sites')]",
				"[concat(variables('factoryId'), '/datasets/Orders')]",
				"[concat(variables('factoryId'), '/datasets/Audits')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SimpleMergeClient')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "staging_Clients",
								"type": "DatasetReference"
							},
							"name": "StagingClients"
						},
						{
							"dataset": {
								"referenceName": "Clients",
								"type": "DatasetReference"
							},
							"name": "ExistingClients"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Clients",
								"type": "DatasetReference"
							},
							"name": "MergedClients"
						}
					],
					"transformations": [
						{
							"name": "ExistingClientIds"
						},
						{
							"name": "LookupExistingIds"
						},
						{
							"name": "DecideMerge"
						}
					],
					"script": "source(output(\n\t\trow_id as string,\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tlegacy_id as string,\n\t\tname as string,\n\t\tlogo as string,\n\t\tfooter as string,\n\t\tclient_type as string,\n\t\tsage_reference as string,\n\t\tmanager_id as string,\n\t\tcontract_expiry as string,\n\t\tstore_locator as string,\n\t\tstatus as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\torg_level1_name as string,\n\t\torg_level2_name as string,\n\t\torg_level3_name as string,\n\t\torg_level4_name as string,\n\t\tentity_source as string,\n\t\tinsert_date as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StagingClients\nsource(output(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tlegacy_id as string,\n\t\tname as string,\n\t\tlogo as string,\n\t\tfooter as string,\n\t\tclient_type as string,\n\t\tsage_reference as string,\n\t\tmanager_id as string,\n\t\tcontract_expiry as string,\n\t\tstore_locator as string,\n\t\tstatus as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\torg_level1_name as string,\n\t\torg_level2_name as string,\n\t\torg_level3_name as string,\n\t\torg_level4_name as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ExistingClients\nExistingClients select(mapColumn(\n\t\texisting_id = id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ExistingClientIds\nStagingClients, ExistingClientIds lookup(id == existing_id,\n\tmultiple: false,\n\tpickup: 'first',\n\tasc(existing_id, true),\n\tbroadcast: 'auto')~> LookupExistingIds\nLookupExistingIds alterRow(insertIf(isNull(existing_id)),\n\tupdateIf(!isNull(existing_id))) ~> DecideMerge\nDecideMerge sink(input(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tlegacy_id as string,\n\t\tname as string,\n\t\tlogo as string,\n\t\tfooter as string,\n\t\tclient_type as string,\n\t\tsage_reference as string,\n\t\tmanager_id as string,\n\t\tcontract_expiry as string,\n\t\tstore_locator as string,\n\t\tstatus as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\torg_level1_name as string,\n\t\torg_level2_name as string,\n\t\torg_level3_name as string,\n\t\torg_level4_name as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['id'],\n\tformat: 'table',\n\tmapColumn(\n\t\tid,\n\t\tinternal_id,\n\t\tlegacy_id,\n\t\tname,\n\t\tlogo,\n\t\tfooter,\n\t\tclient_type,\n\t\tsage_reference,\n\t\tmanager_id,\n\t\tcontract_expiry,\n\t\tstore_locator,\n\t\tstatus,\n\t\tcreated_at,\n\t\tmodified_at,\n\t\torg_level1_name,\n\t\torg_level2_name,\n\t\torg_level3_name,\n\t\torg_level4_name,\n\t\tentity_source\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> MergedClients"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/staging_Clients')]",
				"[concat(variables('factoryId'), '/datasets/Clients')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StagingToDWAnswers')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "staging_Answers",
								"type": "DatasetReference"
							},
							"name": "Staging"
						},
						{
							"dataset": {
								"referenceName": "Answers",
								"type": "DatasetReference"
							},
							"name": "Existing"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Answers",
								"type": "DatasetReference"
							},
							"name": "Merge"
						}
					],
					"transformations": [
						{
							"name": "LookupExistingIds"
						},
						{
							"name": "ExistingIds"
						},
						{
							"name": "DecideMerge"
						},
						{
							"name": "SortByInsertedDate"
						}
					],
					"script": "source(output(\n\t\trow_id as string,\n\t\tid as string,\n\t\tinternal_id as string,\n\t\ttype as string,\n\t\tvalue as string,\n\t\thidden as boolean,\n\t\taudit_id as string,\n\t\tquestion_template_id as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string,\n\t\tinsert_date as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Staging\nsource(output(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\ttype as string,\n\t\tvalue as string,\n\t\thidden as boolean,\n\t\taudit_id as string,\n\t\tquestion_template_id as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Existing\nSortByInsertedDate, ExistingIds lookup(id == existing_id,\n\tmultiple: false,\n\tpickup: 'first',\n\tasc(existing_id, true),\n\tbroadcast: 'auto')~> LookupExistingIds\nExisting select(mapColumn(\n\t\texisting_id = id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ExistingIds\nLookupExistingIds alterRow(insertIf(isNull(existing_id)),\n\tupdateIf(!isNull(existing_id))) ~> DecideMerge\nStaging sort(asc(insert_date, true)) ~> SortByInsertedDate\nDecideMerge sink(input(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\ttype as string,\n\t\tvalue as string,\n\t\thidden as boolean,\n\t\taudit_id as string,\n\t\tquestion_template_id as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['id'],\n\tformat: 'table',\n\tmapColumn(\n\t\tid,\n\t\tinternal_id,\n\t\ttype,\n\t\tvalue,\n\t\thidden,\n\t\taudit_id,\n\t\tquestion_template_id,\n\t\tcreated_at,\n\t\tmodified_at,\n\t\tentity_source\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> Merge"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/staging_Answers')]",
				"[concat(variables('factoryId'), '/datasets/Answers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StagingToDWAuditors')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "staging_Auditors",
								"type": "DatasetReference"
							},
							"name": "Staging"
						},
						{
							"dataset": {
								"referenceName": "Auditors",
								"type": "DatasetReference"
							},
							"name": "Existing"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Auditors",
								"type": "DatasetReference"
							},
							"name": "Merge"
						}
					],
					"transformations": [
						{
							"name": "LookupExistingIds"
						},
						{
							"name": "Existingds"
						},
						{
							"name": "DecideMerge"
						},
						{
							"name": "SortByInsertedDate"
						}
					],
					"script": "source(output(\n\t\trow_id as string,\n\t\tid as string,\n\t\tinternal_id as string,\n\t\temail_settings as boolean,\n\t\tpassport as string,\n\t\tidentification as string,\n\t\tcountry as string,\n\t\thonorific as string,\n\t\tgender as string,\n\t\tdate_of_birth as string,\n\t\tmarital_status as string,\n\t\toccupation as string,\n\t\tni_pps as string,\n\t\thome_address_1 as string,\n\t\thome_address_2 as string,\n\t\thome_city as string,\n\t\thome_post_code as string,\n\t\thome_county as string,\n\t\tterm_address_1 as string,\n\t\tterm_address_2 as string,\n\t\tterm_city as string,\n\t\tterm_post_code as string,\n\t\tterm_county as string,\n\t\tmobile_number as string,\n\t\thome_number as string,\n\t\tnotes as string,\n\t\thear_about_us as string,\n\t\thear_about_us_details as string,\n\t\trecommended_by as string,\n\t\temail_communication as boolean,\n\t\tservelegal_community as boolean,\n\t\tcard_name as string,\n\t\tbank_country as string,\n\t\taccount_number as string,\n\t\tsort_code as string,\n\t\tswift_code as string,\n\t\tiban_number as string,\n\t\tcircumstances as string,\n\t\tstudent_loans as string,\n\t\taccess_to_car as string,\n\t\twhy_servelegal as string,\n\t\tabout_yourself as string,\n\t\ttravel_outside as string,\n\t\tauditor_status as string,\n\t\tuser_id as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string,\n\t\tinsert_date as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Staging\nsource(output(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\temail_settings as boolean,\n\t\tpassport as string,\n\t\tidentification as string,\n\t\tcountry as string,\n\t\thonorific as string,\n\t\tgender as string,\n\t\tdate_of_birth as string,\n\t\tmarital_status as string,\n\t\toccupation as string,\n\t\tni_pps as string,\n\t\thome_address_1 as string,\n\t\thome_address_2 as string,\n\t\thome_city as string,\n\t\thome_post_code as string,\n\t\thome_county as string,\n\t\tterm_address_1 as string,\n\t\tterm_address_2 as string,\n\t\tterm_city as string,\n\t\tterm_post_code as string,\n\t\tterm_county as string,\n\t\tmobile_number as string,\n\t\thome_number as string,\n\t\tnotes as string,\n\t\thear_about_us as string,\n\t\thear_about_us_details as string,\n\t\trecommended_by as string,\n\t\temail_communication as boolean,\n\t\tservelegal_community as boolean,\n\t\tcard_name as string,\n\t\tbank_country as string,\n\t\taccount_number as string,\n\t\tsort_code as string,\n\t\tswift_code as string,\n\t\tiban_number as string,\n\t\tcircumstances as string,\n\t\tstudent_loans as string,\n\t\taccess_to_car as string,\n\t\twhy_servelegal as string,\n\t\tabout_yourself as string,\n\t\ttravel_outside as string,\n\t\tauditor_status as string,\n\t\tuser_id as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Existing\nSortByInsertedDate, Existingds lookup(id == existing_id,\n\tmultiple: false,\n\tpickup: 'first',\n\tasc(existing_id, true),\n\tbroadcast: 'auto')~> LookupExistingIds\nExisting select(mapColumn(\n\t\texisting_id = id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Existingds\nLookupExistingIds alterRow(insertIf(isNull(existing_id)),\n\tupdateIf(!isNull(existing_id))) ~> DecideMerge\nStaging sort(asc(insert_date, true)) ~> SortByInsertedDate\nDecideMerge sink(input(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\temail_settings as boolean,\n\t\tpassport as string,\n\t\tidentification as string,\n\t\tcountry as string,\n\t\thonorific as string,\n\t\tgender as string,\n\t\tdate_of_birth as string,\n\t\tmarital_status as string,\n\t\toccupation as string,\n\t\tni_pps as string,\n\t\thome_address_1 as string,\n\t\thome_address_2 as string,\n\t\thome_city as string,\n\t\thome_post_code as string,\n\t\thome_county as string,\n\t\tterm_address_1 as string,\n\t\tterm_address_2 as string,\n\t\tterm_city as string,\n\t\tterm_post_code as string,\n\t\tterm_county as string,\n\t\tmobile_number as string,\n\t\thome_number as string,\n\t\tnotes as string,\n\t\thear_about_us as string,\n\t\thear_about_us_details as string,\n\t\trecommended_by as string,\n\t\temail_communication as boolean,\n\t\tservelegal_community as boolean,\n\t\tcard_name as string,\n\t\tbank_country as string,\n\t\taccount_number as string,\n\t\tsort_code as string,\n\t\tswift_code as string,\n\t\tiban_number as string,\n\t\tcircumstances as string,\n\t\tstudent_loans as string,\n\t\taccess_to_car as string,\n\t\twhy_servelegal as string,\n\t\tabout_yourself as string,\n\t\ttravel_outside as string,\n\t\tauditor_status as string,\n\t\tuser_id as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['id'],\n\tformat: 'table',\n\tmapColumn(\n\t\tid,\n\t\tinternal_id,\n\t\temail_settings,\n\t\tpassport,\n\t\tidentification,\n\t\tcountry,\n\t\thonorific,\n\t\tgender,\n\t\tdate_of_birth,\n\t\tmarital_status,\n\t\toccupation,\n\t\tni_pps,\n\t\thome_address_1,\n\t\thome_address_2,\n\t\thome_city,\n\t\thome_post_code,\n\t\thome_county,\n\t\tterm_address_1,\n\t\tterm_address_2,\n\t\tterm_city,\n\t\tterm_post_code,\n\t\tterm_county,\n\t\tmobile_number,\n\t\thome_number,\n\t\tnotes,\n\t\thear_about_us,\n\t\thear_about_us_details,\n\t\trecommended_by,\n\t\temail_communication,\n\t\tservelegal_community,\n\t\tcard_name,\n\t\tbank_country,\n\t\taccount_number,\n\t\tsort_code,\n\t\tswift_code,\n\t\tiban_number,\n\t\tcircumstances,\n\t\tstudent_loans,\n\t\taccess_to_car,\n\t\twhy_servelegal,\n\t\tabout_yourself,\n\t\ttravel_outside,\n\t\tauditor_status,\n\t\tuser_id,\n\t\tcreated_at,\n\t\tmodified_at,\n\t\tentity_source\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> Merge"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/staging_Auditors')]",
				"[concat(variables('factoryId'), '/datasets/Auditors')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StagingToDWAudits')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "staging_Audits",
								"type": "DatasetReference"
							},
							"name": "Staging"
						},
						{
							"dataset": {
								"referenceName": "Audits",
								"type": "DatasetReference"
							},
							"name": "Existing"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Audits",
								"type": "DatasetReference"
							},
							"name": "Merge"
						}
					],
					"transformations": [
						{
							"name": "LookupExistingIds"
						},
						{
							"name": "ExistingIds"
						},
						{
							"name": "DecideMerge"
						},
						{
							"name": "SortByInsertedDate"
						}
					],
					"script": "source(output(\n\t\trow_id as string,\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tquery_notes as string,\n\t\tquery_category as string,\n\t\tsurvey_result as string,\n\t\tvisit_info as string,\n\t\tsubmitted_date as string,\n\t\tapproval_date as string,\n\t\tdeadline_date as string,\n\t\tdate_of_visit as string,\n\t\tpurchase_cost as double,\n\t\tallowance as double,\n\t\tmileage as double,\n\t\tentrance_charge as double,\n\t\ttravel_expenses as double,\n\t\ttravel_expenses_type as string,\n\t\ttravel_expenses_description as string,\n\t\treclaimable_expenses as double,\n\t\treclaimable_expenses_type as string,\n\t\treclaimable_expenses_description as string,\n\t\tpaid as boolean,\n\t\tbatched as boolean,\n\t\tpayroll_date as string,\n\t\tpay_date as string,\n\t\temail_note as string,\n\t\tstatus as string,\n\t\torder_id as string,\n\t\tsite_id as string,\n\t\tapproved_by_id as string,\n\t\tauditor_id as string,\n\t\titem_to_order as string,\n\t\tauditor_instructions as string,\n\t\tauditor_pay_per_audit as double,\n\t\tapproving_notes as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string,\n\t\tinsert_date as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Staging\nsource(output(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tquery_notes as string,\n\t\tquery_category as string,\n\t\tsurvey_result as string,\n\t\tvisit_info as string,\n\t\tsubmitted_date as string,\n\t\tapproval_date as string,\n\t\tdeadline_date as string,\n\t\tdate_of_visit as string,\n\t\tpurchase_cost as double,\n\t\tallowance as double,\n\t\tmileage as double,\n\t\tentrance_charge as double,\n\t\ttravel_expenses as double,\n\t\ttravel_expenses_type as string,\n\t\ttravel_expenses_description as string,\n\t\treclaimable_expenses as double,\n\t\treclaimable_expenses_type as string,\n\t\treclaimable_expenses_description as string,\n\t\tpaid as boolean,\n\t\tbatched as boolean,\n\t\tpayroll_date as string,\n\t\tpay_date as string,\n\t\temail_note as string,\n\t\tstatus as string,\n\t\torder_id as string,\n\t\tsite_id as string,\n\t\tapproved_by_id as string,\n\t\tauditor_id as string,\n\t\titem_to_order as string,\n\t\tauditor_instructions as string,\n\t\tauditor_pay_per_audit as double,\n\t\tapproving_notes as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Existing\nSortByInsertedDate, ExistingIds lookup(id == existing_id,\n\tmultiple: false,\n\tpickup: 'first',\n\tasc(existing_id, true),\n\tbroadcast: 'auto')~> LookupExistingIds\nExisting select(mapColumn(\n\t\texisting_id = id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ExistingIds\nLookupExistingIds alterRow(insertIf(isNull(existing_id)),\n\tupdateIf(!isNull(existing_id))) ~> DecideMerge\nStaging sort(asc(insert_date, true)) ~> SortByInsertedDate\nDecideMerge sink(input(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tquery_notes as string,\n\t\tquery_category as string,\n\t\tsurvey_result as string,\n\t\tvisit_info as string,\n\t\tsubmitted_date as string,\n\t\tapproval_date as string,\n\t\tdeadline_date as string,\n\t\tdate_of_visit as string,\n\t\tpurchase_cost as double,\n\t\tallowance as double,\n\t\tmileage as double,\n\t\tentrance_charge as double,\n\t\ttravel_expenses as double,\n\t\ttravel_expenses_type as string,\n\t\ttravel_expenses_description as string,\n\t\treclaimable_expenses as double,\n\t\treclaimable_expenses_type as string,\n\t\treclaimable_expenses_description as string,\n\t\tpaid as boolean,\n\t\tbatched as boolean,\n\t\tpayroll_date as string,\n\t\tpay_date as string,\n\t\temail_note as string,\n\t\tstatus as string,\n\t\torder_id as string,\n\t\tsite_id as string,\n\t\tapproved_by_id as string,\n\t\tauditor_id as string,\n\t\titem_to_order as string,\n\t\tauditor_instructions as string,\n\t\tauditor_pay_per_audit as double,\n\t\tapproving_notes as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['id'],\n\tformat: 'table',\n\tmapColumn(\n\t\tid,\n\t\tinternal_id,\n\t\tquery_notes,\n\t\tquery_category,\n\t\tsurvey_result,\n\t\tvisit_info,\n\t\tsubmitted_date,\n\t\tapproval_date,\n\t\tdeadline_date,\n\t\tdate_of_visit,\n\t\tpurchase_cost,\n\t\tallowance,\n\t\tmileage,\n\t\tentrance_charge,\n\t\ttravel_expenses,\n\t\ttravel_expenses_type,\n\t\ttravel_expenses_description,\n\t\treclaimable_expenses,\n\t\treclaimable_expenses_type,\n\t\treclaimable_expenses_description,\n\t\tpaid,\n\t\tbatched,\n\t\tpayroll_date,\n\t\tpay_date,\n\t\temail_note,\n\t\tstatus,\n\t\torder_id,\n\t\tsite_id,\n\t\tapproved_by_id,\n\t\tauditor_id,\n\t\titem_to_order,\n\t\tauditor_instructions,\n\t\tauditor_pay_per_audit,\n\t\tapproving_notes,\n\t\tcreated_at,\n\t\tmodified_at,\n\t\tentity_source\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> Merge"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/staging_Audits')]",
				"[concat(variables('factoryId'), '/datasets/Audits')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StagingToDWClients')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "staging_Clients",
								"type": "DatasetReference"
							},
							"name": "Staging"
						},
						{
							"dataset": {
								"referenceName": "Clients",
								"type": "DatasetReference"
							},
							"name": "Existing"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Clients",
								"type": "DatasetReference"
							},
							"name": "Merge"
						}
					],
					"transformations": [
						{
							"name": "LookupExistingIds"
						},
						{
							"name": "ExistingIds"
						},
						{
							"name": "DecideMerge"
						},
						{
							"name": "SortByInsertedDate"
						}
					],
					"script": "source(output(\n\t\trow_id as string,\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tlegacy_id as string,\n\t\tname as string,\n\t\tlogo as string,\n\t\tfooter as string,\n\t\tclient_type as string,\n\t\tsage_reference as string,\n\t\tmanager_id as string,\n\t\tcontract_expiry as string,\n\t\tstore_locator as string,\n\t\tstatus as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\torg_level1_name as string,\n\t\torg_level2_name as string,\n\t\torg_level3_name as string,\n\t\torg_level4_name as string,\n\t\tentity_source as string,\n\t\tinsert_date as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Staging\nsource(output(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tlegacy_id as string,\n\t\tname as string,\n\t\tlogo as string,\n\t\tfooter as string,\n\t\tclient_type as string,\n\t\tsage_reference as string,\n\t\tmanager_id as string,\n\t\tcontract_expiry as string,\n\t\tstore_locator as string,\n\t\tstatus as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\torg_level1_name as string,\n\t\torg_level2_name as string,\n\t\torg_level3_name as string,\n\t\torg_level4_name as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Existing\nSortByInsertedDate, ExistingIds lookup(id == existing_id,\n\tmultiple: false,\n\tpickup: 'first',\n\tasc(existing_id, true),\n\tbroadcast: 'auto')~> LookupExistingIds\nExisting select(mapColumn(\n\t\texisting_id = id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ExistingIds\nLookupExistingIds alterRow(insertIf(isNull(existing_id)),\n\tupdateIf(!isNull(existing_id))) ~> DecideMerge\nStaging sort(asc(insert_date, true)) ~> SortByInsertedDate\nDecideMerge sink(input(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tlegacy_id as string,\n\t\tname as string,\n\t\tlogo as string,\n\t\tfooter as string,\n\t\tclient_type as string,\n\t\tsage_reference as string,\n\t\tmanager_id as string,\n\t\tcontract_expiry as string,\n\t\tstore_locator as string,\n\t\tstatus as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\torg_level1_name as string,\n\t\torg_level2_name as string,\n\t\torg_level3_name as string,\n\t\torg_level4_name as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['id'],\n\tformat: 'table',\n\tmapColumn(\n\t\tid,\n\t\tinternal_id,\n\t\tlegacy_id,\n\t\tname,\n\t\tlogo,\n\t\tfooter,\n\t\tclient_type,\n\t\tsage_reference,\n\t\tmanager_id,\n\t\tcontract_expiry,\n\t\tstore_locator,\n\t\tstatus,\n\t\tcreated_at,\n\t\tmodified_at,\n\t\torg_level1_name,\n\t\torg_level2_name,\n\t\torg_level3_name,\n\t\torg_level4_name,\n\t\tentity_source\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> Merge"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/staging_Clients')]",
				"[concat(variables('factoryId'), '/datasets/Clients')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StagingToDWOrders')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "staging_Orders",
								"type": "DatasetReference"
							},
							"name": "Staging"
						},
						{
							"dataset": {
								"referenceName": "Orders",
								"type": "DatasetReference"
							},
							"name": "Existing"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Orders",
								"type": "DatasetReference"
							},
							"name": "Merge"
						}
					],
					"transformations": [
						{
							"name": "LookupExistingIds"
						},
						{
							"name": "ExistingIds"
						},
						{
							"name": "DecideMerge"
						},
						{
							"name": "SortByInsertedDate"
						}
					],
					"script": "source(output(\n\t\trow_id as string,\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tschedule_type as string,\n\t\titem_to_order as string,\n\t\torder_info as string,\n\t\tvisits_to_be_billed as integer,\n\t\tstart_date as string,\n\t\tend_date as string,\n\t\tauditor_pay_per_audit as string,\n\t\tclient_charge_per_audit as string,\n\t\tauditor_instructions as string,\n\t\temail_subject as string,\n\t\temail_survey_result as string,\n\t\texclude_from_client_reporting as boolean,\n\t\tnarv_visits_only as boolean,\n\t\tstatus as string,\n\t\tcurrency as string,\n\t\tclient_id as string,\n\t\trevision_id as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string,\n\t\tinsert_date as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Staging\nsource(output(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tschedule_type as string,\n\t\titem_to_order as string,\n\t\torder_info as string,\n\t\tvisits_to_be_billed as integer,\n\t\tstart_date as string,\n\t\tend_date as string,\n\t\tauditor_pay_per_audit as string,\n\t\tclient_charge_per_audit as string,\n\t\tauditor_instructions as string,\n\t\temail_subject as string,\n\t\temail_survey_result as string,\n\t\texclude_from_client_reporting as boolean,\n\t\tnarv_visits_only as boolean,\n\t\tstatus as string,\n\t\tcurrency as string,\n\t\tclient_id as string,\n\t\trevision_id as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Existing\nSortByInsertedDate, ExistingIds lookup(id == existing_id,\n\tmultiple: false,\n\tpickup: 'first',\n\tasc(existing_id, true),\n\tbroadcast: 'auto')~> LookupExistingIds\nExisting select(mapColumn(\n\t\texisting_id = id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ExistingIds\nLookupExistingIds alterRow(insertIf(isNull(existing_id)),\n\tupdateIf(!isNull(existing_id))) ~> DecideMerge\nStaging sort(asc(insert_date, true)) ~> SortByInsertedDate\nDecideMerge sink(input(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tschedule_type as string,\n\t\titem_to_order as string,\n\t\torder_info as string,\n\t\tvisits_to_be_billed as integer,\n\t\tstart_date as string,\n\t\tend_date as string,\n\t\tauditor_pay_per_audit as string,\n\t\tclient_charge_per_audit as string,\n\t\tauditor_instructions as string,\n\t\temail_subject as string,\n\t\temail_survey_result as string,\n\t\texclude_from_client_reporting as boolean,\n\t\tnarv_visits_only as boolean,\n\t\tstatus as string,\n\t\tcurrency as string,\n\t\tclient_id as string,\n\t\trevision_id as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['id'],\n\tformat: 'table',\n\tmapColumn(\n\t\tid,\n\t\tinternal_id,\n\t\tschedule_type,\n\t\titem_to_order,\n\t\torder_info,\n\t\tvisits_to_be_billed,\n\t\tstart_date,\n\t\tend_date,\n\t\tauditor_pay_per_audit,\n\t\tclient_charge_per_audit,\n\t\tauditor_instructions,\n\t\temail_subject,\n\t\temail_survey_result,\n\t\texclude_from_client_reporting,\n\t\tnarv_visits_only,\n\t\tstatus,\n\t\tcurrency,\n\t\tclient_id,\n\t\trevision_id,\n\t\tcreated_at,\n\t\tmodified_at,\n\t\tentity_source\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> Merge"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/staging_Orders')]",
				"[concat(variables('factoryId'), '/datasets/Orders')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StagingToDWQuestionTemplates')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "staging_QuestionTemplates",
								"type": "DatasetReference"
							},
							"name": "Staging"
						},
						{
							"dataset": {
								"referenceName": "QuestionTemplates",
								"type": "DatasetReference"
							},
							"name": "Existing"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "QuestionTemplates",
								"type": "DatasetReference"
							},
							"name": "Merge"
						}
					],
					"transformations": [
						{
							"name": "LookupExistingIds"
						},
						{
							"name": "ExistingIds"
						},
						{
							"name": "DecideMerge"
						},
						{
							"name": "SortByInsertedDate"
						}
					],
					"script": "source(output(\n\t\trow_id as string,\n\t\tid as string,\n\t\tinternal_id as string,\n\t\thelp as string,\n\t\ttitle as string,\n\t\trequired as boolean,\n\t\ttype as string,\n\t\tconfig as string,\n\t\tcategory as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string,\n\t\tinsert_date as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Staging\nsource(output(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\thelp as string,\n\t\ttitle as string,\n\t\trequired as boolean,\n\t\ttype as string,\n\t\tconfig as string,\n\t\tcategory as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Existing\nSortByInsertedDate, ExistingIds lookup(id == existing_id,\n\tmultiple: false,\n\tpickup: 'first',\n\tasc(existing_id, true),\n\tbroadcast: 'auto')~> LookupExistingIds\nExisting select(mapColumn(\n\t\texisting_id = id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ExistingIds\nLookupExistingIds alterRow(insertIf(isNull(existing_id)),\n\tupdateIf(!isNull(existing_id))) ~> DecideMerge\nStaging sort(asc(insert_date, true)) ~> SortByInsertedDate\nDecideMerge sink(input(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\thelp as string,\n\t\ttitle as string,\n\t\trequired as boolean,\n\t\ttype as string,\n\t\tconfig as string,\n\t\tcategory as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['id'],\n\tformat: 'table',\n\tmapColumn(\n\t\tid,\n\t\tinternal_id,\n\t\thelp,\n\t\ttitle,\n\t\trequired,\n\t\ttype,\n\t\tconfig,\n\t\tcategory,\n\t\tcreated_at,\n\t\tmodified_at,\n\t\tentity_source\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> Merge"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/staging_QuestionTemplates')]",
				"[concat(variables('factoryId'), '/datasets/QuestionTemplates')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StagingToDWQuestions')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "staging_Questions",
								"type": "DatasetReference"
							},
							"name": "Staging"
						},
						{
							"dataset": {
								"referenceName": "Questions",
								"type": "DatasetReference"
							},
							"name": "Existing"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Questions",
								"type": "DatasetReference"
							},
							"name": "Merge"
						}
					],
					"transformations": [
						{
							"name": "LookupExistingIds"
						},
						{
							"name": "ExistingIds"
						},
						{
							"name": "DecideMerge"
						},
						{
							"name": "SortByInsertedDate"
						}
					],
					"script": "source(output(\n\t\trow_id as string,\n\t\tid as string,\n\t\tinternal_id as string,\n\t\thelp as string,\n\t\ttype as string,\n\t\ttitle as string,\n\t\trequired as boolean,\n\t\tcategory as string,\n\t\tconfig as string,\n\t\tquestion_template_id as string,\n\t\trevision_id as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string,\n\t\tinsert_date as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Staging\nsource(output(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\thelp as string,\n\t\ttype as string,\n\t\ttitle as string,\n\t\trequired as boolean,\n\t\tcategory as string,\n\t\tconfig as string,\n\t\tquestion_template_id as string,\n\t\trevision_id as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Existing\nSortByInsertedDate, ExistingIds lookup(id == existing_id,\n\tmultiple: false,\n\tpickup: 'first',\n\tasc(existing_id, true),\n\tbroadcast: 'auto')~> LookupExistingIds\nExisting select(mapColumn(\n\t\texisting_id = id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ExistingIds\nLookupExistingIds alterRow(insertIf(isNull(existing_id)),\n\tupdateIf(!isNull(existing_id))) ~> DecideMerge\nStaging sort(asc(insert_date, true)) ~> SortByInsertedDate\nDecideMerge sink(input(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\thelp as string,\n\t\ttype as string,\n\t\ttitle as string,\n\t\trequired as boolean,\n\t\tcategory as string,\n\t\tconfig as string,\n\t\tquestion_template_id as string,\n\t\trevision_id as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['id'],\n\tformat: 'table',\n\tmapColumn(\n\t\tid,\n\t\tinternal_id,\n\t\thelp,\n\t\ttype,\n\t\ttitle,\n\t\trequired,\n\t\tcategory,\n\t\tconfig,\n\t\tquestion_template_id,\n\t\trevision_id,\n\t\tcreated_at,\n\t\tmodified_at,\n\t\tentity_source\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> Merge"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/staging_Questions')]",
				"[concat(variables('factoryId'), '/datasets/Questions')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StagingToDWRevisions')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "staging_Revisions",
								"type": "DatasetReference"
							},
							"name": "Staging"
						},
						{
							"dataset": {
								"referenceName": "Revisions",
								"type": "DatasetReference"
							},
							"name": "Existing"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Revisions",
								"type": "DatasetReference"
							},
							"name": "Merge"
						}
					],
					"transformations": [
						{
							"name": "LookupExistingIds"
						},
						{
							"name": "ExistingIds"
						},
						{
							"name": "DecideMerge"
						},
						{
							"name": "SortByInsertedDate"
						}
					],
					"script": "source(output(\n\t\trow_id as string,\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tstatus as string,\n\t\tname as string,\n\t\tsurvey_id as string,\n\t\tblocked as boolean,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string,\n\t\tinsert_date as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Staging\nsource(output(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tstatus as string,\n\t\tname as string,\n\t\tsurvey_id as string,\n\t\tblocked as boolean,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Existing\nSortByInsertedDate, ExistingIds lookup(id == existing_id,\n\tmultiple: false,\n\tpickup: 'first',\n\tasc(existing_id, true),\n\tbroadcast: 'auto')~> LookupExistingIds\nExisting select(mapColumn(\n\t\texisting_id = id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ExistingIds\nLookupExistingIds alterRow(insertIf(isNull(existing_id)),\n\tupdateIf(!isNull(existing_id))) ~> DecideMerge\nStaging sort(asc(insert_date, true)) ~> SortByInsertedDate\nDecideMerge sink(input(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tstatus as string,\n\t\tname as string,\n\t\tsurvey_id as string,\n\t\tblocked as boolean,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['id'],\n\tformat: 'table',\n\tmapColumn(\n\t\tid,\n\t\tinternal_id,\n\t\tstatus,\n\t\tname,\n\t\tsurvey_id,\n\t\tblocked,\n\t\tcreated_at,\n\t\tmodified_at,\n\t\tentity_source\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> Merge"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/staging_Revisions')]",
				"[concat(variables('factoryId'), '/datasets/Revisions')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StagingToDWSites')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "staging_Sites",
								"type": "DatasetReference"
							},
							"name": "Staging"
						},
						{
							"dataset": {
								"referenceName": "Sites",
								"type": "DatasetReference"
							},
							"name": "Existing"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Sites",
								"type": "DatasetReference"
							},
							"name": "Merge"
						}
					],
					"transformations": [
						{
							"name": "LookupExistingIds"
						},
						{
							"name": "ExistingIds"
						},
						{
							"name": "DecideMerge"
						},
						{
							"name": "SortByInsertedDate"
						}
					],
					"script": "source(output(\n\t\trow_id as string,\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tlegacy_id as string,\n\t\tname as string,\n\t\taddress_1 as string,\n\t\taddress_2 as string,\n\t\taddress_3 as string,\n\t\tcity as string,\n\t\tpost_code as string,\n\t\tcounty as string,\n\t\tcountry as string,\n\t\tdirections as string,\n\t\tapproving_notes as string,\n\t\tcode as string,\n\t\tstatus as string,\n\t\tclient_id as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\torg_level1 as string,\n\t\torg_level2 as string,\n\t\torg_level3 as string,\n\t\torg_level4 as string,\n\t\tentity_source as string,\n\t\tinsert_date as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Staging\nsource(output(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tlegacy_id as string,\n\t\tname as string,\n\t\taddress_1 as string,\n\t\taddress_2 as string,\n\t\taddress_3 as string,\n\t\tcity as string,\n\t\tpost_code as string,\n\t\tcounty as string,\n\t\tcountry as string,\n\t\tdirections as string,\n\t\tapproving_notes as string,\n\t\tcode as string,\n\t\tstatus as string,\n\t\tclient_id as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\torg_level1 as string,\n\t\torg_level2 as string,\n\t\torg_level3 as string,\n\t\torg_level4 as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Existing\nSortByInsertedDate, ExistingIds lookup(id == existing_id,\n\tmultiple: false,\n\tpickup: 'first',\n\tasc(existing_id, true),\n\tbroadcast: 'auto')~> LookupExistingIds\nExisting select(mapColumn(\n\t\texisting_id = id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ExistingIds\nLookupExistingIds alterRow(insertIf(isNull(existing_id)),\n\tupdateIf(!isNull(existing_id))) ~> DecideMerge\nStaging sort(asc(insert_date, true)) ~> SortByInsertedDate\nDecideMerge sink(input(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tlegacy_id as string,\n\t\tname as string,\n\t\taddress_1 as string,\n\t\taddress_2 as string,\n\t\taddress_3 as string,\n\t\tcity as string,\n\t\tpost_code as string,\n\t\tcounty as string,\n\t\tcountry as string,\n\t\tdirections as string,\n\t\tapproving_notes as string,\n\t\tcode as string,\n\t\tstatus as string,\n\t\tclient_id as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\torg_level1 as string,\n\t\torg_level2 as string,\n\t\torg_level3 as string,\n\t\torg_level4 as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['id'],\n\tformat: 'table',\n\tmapColumn(\n\t\tid,\n\t\tinternal_id,\n\t\tlegacy_id,\n\t\tname,\n\t\taddress_1,\n\t\taddress_2,\n\t\taddress_3,\n\t\tcity,\n\t\tpost_code,\n\t\tcounty,\n\t\tcountry,\n\t\tdirections,\n\t\tapproving_notes,\n\t\tcode,\n\t\tstatus,\n\t\tclient_id,\n\t\tcreated_at,\n\t\tmodified_at,\n\t\torg_level1,\n\t\torg_level2,\n\t\torg_level3,\n\t\torg_level4,\n\t\tentity_source\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> Merge"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/staging_Sites')]",
				"[concat(variables('factoryId'), '/datasets/Sites')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StagingToDWSurveys')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "staging_Surveys",
								"type": "DatasetReference"
							},
							"name": "Staging"
						},
						{
							"dataset": {
								"referenceName": "Surveys",
								"type": "DatasetReference"
							},
							"name": "Existing"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Surveys",
								"type": "DatasetReference"
							},
							"name": "Merge"
						}
					],
					"transformations": [
						{
							"name": "LookupExistingIds"
						},
						{
							"name": "ExistingIds"
						},
						{
							"name": "DecideMerge"
						},
						{
							"name": "SortByInsertedDate"
						}
					],
					"script": "source(output(\n\t\trow_id as string,\n\t\tid as string,\n\t\tinternal_id as string,\n\t\ttitle as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string,\n\t\tinsert_date as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Staging\nsource(output(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\ttitle as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Existing\nSortByInsertedDate, ExistingIds lookup(id == existing_id,\n\tmultiple: false,\n\tpickup: 'first',\n\tasc(existing_id, true),\n\tbroadcast: 'auto')~> LookupExistingIds\nExisting select(mapColumn(\n\t\texisting_id = id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ExistingIds\nLookupExistingIds alterRow(insertIf(isNull(existing_id)),\n\tupdateIf(!isNull(existing_id))) ~> DecideMerge\nStaging sort(asc(insert_date, true)) ~> SortByInsertedDate\nDecideMerge sink(input(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\ttitle as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['id'],\n\tformat: 'table',\n\tmapColumn(\n\t\tid,\n\t\tinternal_id,\n\t\ttitle,\n\t\tcreated_at,\n\t\tmodified_at,\n\t\tentity_source\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> Merge"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/staging_Surveys')]",
				"[concat(variables('factoryId'), '/datasets/Surveys')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StagingToDWUsers')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "staging_Users",
								"type": "DatasetReference"
							},
							"name": "Staging"
						},
						{
							"dataset": {
								"referenceName": "Users",
								"type": "DatasetReference"
							},
							"name": "Existing"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Users",
								"type": "DatasetReference"
							},
							"name": "Merge"
						}
					],
					"transformations": [
						{
							"name": "LookupExistingIds"
						},
						{
							"name": "ExistingIds"
						},
						{
							"name": "DecideMerge"
						},
						{
							"name": "SortByInsertedDate"
						}
					],
					"script": "source(output(\n\t\trow_id as string,\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tfirst_name as string,\n\t\tmiddle_name as string,\n\t\tlast_name as string,\n\t\temail as string,\n\t\timage as string,\n\t\tstatus as string,\n\t\tnotify_user as boolean,\n\t\trole as string,\n\t\tlast_access as string,\n\t\tclient_id as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string,\n\t\tinsert_date as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Staging\nsource(output(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tfirst_name as string,\n\t\tmiddle_name as string,\n\t\tlast_name as string,\n\t\temail as string,\n\t\timage as string,\n\t\tstatus as string,\n\t\tnotify_user as boolean,\n\t\trole as string,\n\t\tlast_access as string,\n\t\tclient_id as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Existing\nSortByInsertedDate, ExistingIds lookup(id == existing_id,\n\tmultiple: false,\n\tpickup: 'first',\n\tasc(existing_id, true),\n\tbroadcast: 'auto')~> LookupExistingIds\nExisting select(mapColumn(\n\t\texisting_id = id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ExistingIds\nLookupExistingIds alterRow(insertIf(isNull(existing_id)),\n\tupdateIf(!isNull(existing_id))) ~> DecideMerge\nStaging sort(asc(insert_date, true)) ~> SortByInsertedDate\nDecideMerge sink(input(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tfirst_name as string,\n\t\tmiddle_name as string,\n\t\tlast_name as string,\n\t\temail as string,\n\t\timage as string,\n\t\tstatus as string,\n\t\tnotify_user as boolean,\n\t\trole as string,\n\t\tlast_access as string,\n\t\tclient_id as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['id'],\n\tformat: 'table',\n\tmapColumn(\n\t\tid,\n\t\tinternal_id,\n\t\tfirst_name,\n\t\tmiddle_name,\n\t\tlast_name,\n\t\temail,\n\t\timage,\n\t\tstatus,\n\t\tnotify_user,\n\t\trole,\n\t\tlast_access,\n\t\tclient_id,\n\t\tcreated_at,\n\t\tmodified_at,\n\t\tentity_source\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> Merge"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/staging_Users')]",
				"[concat(variables('factoryId'), '/datasets/Users')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SyncAVSClients')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "staging_Clients",
								"type": "DatasetReference"
							},
							"name": "StagingClient"
						},
						{
							"dataset": {
								"referenceName": "Clients",
								"type": "DatasetReference"
							},
							"name": "ExistingClients"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ErrorOutput",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "Clients",
								"type": "DatasetReference"
							},
							"name": "UpsertClient"
						}
					],
					"transformations": [
						{
							"name": "ExistingClientIds"
						},
						{
							"name": "CheckIdConsistency"
						},
						{
							"name": "LookupByLegacyId"
						},
						{
							"name": "LookupByGuid"
						},
						{
							"name": "MergeDecision"
						},
						{
							"name": "ExistingLegacyClientId"
						},
						{
							"name": "ExistingLegacyClients"
						}
					],
					"script": "source(output(\n\t\trow_id as string,\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tlegacy_id as string,\n\t\tname as string,\n\t\tlogo as string,\n\t\tfooter as string,\n\t\tclient_type as string,\n\t\tsage_reference as string,\n\t\tmanager_id as string,\n\t\tcontract_expiry as string,\n\t\tstore_locator as string,\n\t\tstatus as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\torg_level1_name as string,\n\t\torg_level2_name as string,\n\t\torg_level3_name as string,\n\t\torg_level4_name as string,\n\t\tentity_source as string,\n\t\tinsert_date as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StagingClient\nsource(output(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tlegacy_id as string,\n\t\tname as string,\n\t\tlogo as string,\n\t\tfooter as string,\n\t\tclient_type as string,\n\t\tsage_reference as string,\n\t\tmanager_id as string,\n\t\tcontract_expiry as string,\n\t\tstore_locator as string,\n\t\tstatus as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\torg_level1_name as string,\n\t\torg_level2_name as string,\n\t\torg_level3_name as string,\n\t\torg_level4_name as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ExistingClients\nExistingClients select(mapColumn(\n\t\te_id = id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ExistingClientIds\nLookupByLegacyId split(!isNull(existing_legacy_id) && (id != existing_id),\n\tdisjoint: false) ~> CheckIdConsistency@(InconsistentLegacyId, ConsistentOrNewClients)\nStagingClient, ExistingLegacyClientId lookup(legacy_id == existing_legacy_id,\n\tmultiple: false,\n\tpickup: 'first',\n\tasc(existing_id, true),\n\tbroadcast: 'auto')~> LookupByLegacyId\nCheckIdConsistency@ConsistentOrNewClients, ExistingClientIds lookup(id == e_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupByGuid\nLookupByGuid alterRow(insertIf(isNull(e_id)),\n\tupdateIf(!isNull(e_id))) ~> MergeDecision\nExistingLegacyClients select(mapColumn(\n\t\texisting_legacy_id = legacy_id,\n\t\texisting_id = id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ExistingLegacyClientId\nExistingClients filter(!isNull(legacy_id)) ~> ExistingLegacyClients\nCheckIdConsistency@InconsistentLegacyId sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tmapColumn(\n\t\trow_id,\n\t\tid,\n\t\tinternal_id,\n\t\tlegacy_id,\n\t\tname,\n\t\tlogo,\n\t\tfooter,\n\t\tclient_type,\n\t\tsage_reference,\n\t\tmanager_id,\n\t\tcontract_expiry,\n\t\tstore_locator,\n\t\tstatus,\n\t\tcreated_at,\n\t\tmodified_at,\n\t\torg_level1_name,\n\t\torg_level2_name,\n\t\torg_level3_name,\n\t\torg_level4_name,\n\t\tentity_source,\n\t\tinsert_date,\n\t\texisting_legacy_id,\n\t\texisting_id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1\nMergeDecision sink(input(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tlegacy_id as string,\n\t\tname as string,\n\t\tlogo as string,\n\t\tfooter as string,\n\t\tclient_type as string,\n\t\tsage_reference as string,\n\t\tmanager_id as string,\n\t\tcontract_expiry as string,\n\t\tstore_locator as string,\n\t\tstatus as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\torg_level1_name as string,\n\t\torg_level2_name as string,\n\t\torg_level3_name as string,\n\t\torg_level4_name as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['id'],\n\tformat: 'table',\n\tmapColumn(\n\t\tid,\n\t\tinternal_id,\n\t\tlegacy_id,\n\t\tname,\n\t\tlogo,\n\t\tfooter,\n\t\tclient_type,\n\t\tsage_reference,\n\t\tmanager_id,\n\t\tcontract_expiry,\n\t\tstore_locator,\n\t\tstatus,\n\t\tcreated_at,\n\t\tmodified_at,\n\t\torg_level1_name,\n\t\torg_level2_name,\n\t\torg_level3_name,\n\t\torg_level4_name,\n\t\tentity_source\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> UpsertClient"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/staging_Clients')]",
				"[concat(variables('factoryId'), '/datasets/Clients')]",
				"[concat(variables('factoryId'), '/datasets/ErrorOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/selfhosted')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Clients",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ErrorOutput",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "source(output(\n\t\tid as string,\n\t\tinternal_id as string,\n\t\tlegacy_id as string,\n\t\tname as string,\n\t\tlogo as string,\n\t\tfooter as string,\n\t\tclient_type as string,\n\t\tsage_reference as string,\n\t\tmanager_id as string,\n\t\tcontract_expiry as string,\n\t\tstore_locator as string,\n\t\tstatus as string,\n\t\tcreated_at as string,\n\t\tmodified_at as string,\n\t\torg_level1_name as string,\n\t\torg_level2_name as string,\n\t\torg_level3_name as string,\n\t\torg_level4_name as string,\n\t\tentity_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> source1\nsource1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tmapColumn(\n\t\tid,\n\t\tinternal_id,\n\t\tlegacy_id,\n\t\tname,\n\t\tlogo,\n\t\tfooter,\n\t\tclient_type,\n\t\tsage_reference,\n\t\tmanager_id,\n\t\tcontract_expiry,\n\t\tstore_locator,\n\t\tstatus,\n\t\tcreated_at,\n\t\tmodified_at,\n\t\torg_level1_name,\n\t\torg_level2_name,\n\t\torg_level3_name,\n\t\torg_level4_name,\n\t\tentity_source\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Clients')]",
				"[concat(variables('factoryId'), '/datasets/ErrorOutput')]"
			]
		}
	]
}